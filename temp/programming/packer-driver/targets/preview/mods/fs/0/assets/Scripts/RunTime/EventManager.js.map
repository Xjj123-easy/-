{"version":3,"sources":["file:///E:/cocosproject/Dome/cocos-start-demo/assets/Scripts/RunTime/EventManager.ts"],"names":["EventManager","Singleton","Map","Instance","GetInstance","on","eventName","func","ctx","eventDic","has","get","push","set","off","index","findIndex","i","splice","emit","params","forEach","apply","clear"],"mappings":";;;yCAUqBA,Y;;;;;;;;;;;;;;;;AAPdC,MAAAA,S;;;;;;;yBAOcD,Y,GAAN,MAAMA,YAAN;AAAA;AAAA,kCAAoC;AAAA;AAAA;;AAAA,4CAMN,IAAIE,GAAJ,EANM;AAAA;;AAG7B,mBAARC,QAAQ,GAAE;AACf,iBAAQ,MAAMC,WAAN,EAAR;AACL;;AAIDC,QAAAA,EAAE,CAACC,SAAD,EAAkBC,IAAlB,EAAgCC,GAAhC,EAA6C;AAC5C,cAAG,KAAKC,QAAL,CAAcC,GAAd,CAAkBJ,SAAlB,CAAH,EAAgC;AAC1B,iBAAKG,QAAL,CAAcE,GAAd,CAAkBL,SAAlB,EAA6BM,IAA7B,CAAkC;AAACL,cAAAA,IAAD;AAAMC,cAAAA;AAAN,aAAlC;AACL,WAFD,MAEK;AACC,iBAAKC,QAAL,CAAcI,GAAd,CAAkBP,SAAlB,EAA4B,CAAC;AAACC,cAAAA,IAAD;AAAMC,cAAAA;AAAN,aAAD,CAA5B;AACL;AACH;;AACDM,QAAAA,GAAG,CAACR,SAAD,EAAkBC,IAAlB,EAAgC;AAChC,cAAG,KAAKE,QAAL,CAAcC,GAAd,CAAkBJ,SAAlB,CAAH,EAAgC;AAC1B,gBAAMS,KAAK,GAAC,KAAKN,QAAL,CAAcE,GAAd,CAAkBL,SAAlB,EAA6BU,SAA7B,CAAwCC,CAAD,IAAKA,CAAC,CAACV,IAAF,KAASA,IAArD,CAAZ;AACAQ,YAAAA,KAAK,GAAC,CAAC,CAAP,IAAU,KAAKN,QAAL,CAAcE,GAAd,CAAkBL,SAAlB,EAA6BY,MAA7B,CAAoCH,KAApC,EAA0C,CAA1C,CAAV;AACL;AACH;;AACDI,QAAAA,IAAI,CAACb,SAAD,EAAsC;AAAA,4CAAjBc,MAAiB;AAAjBA,YAAAA,MAAiB;AAAA;;AACvC,cAAG,KAAKX,QAAL,CAAcC,GAAd,CAAkBJ,SAAlB,CAAH,EAAgC;AAC1B,iBAAKG,QAAL,CAAcE,GAAd,CAAkBL,SAAlB,EAA6Be,OAA7B,CAAqC,UAAc;AAAA,kBAAb;AAACd,gBAAAA,IAAD;AAAMC,gBAAAA;AAAN,eAAa;AAC9CA,cAAAA,GAAG,GAACD,IAAI,CAACe,KAAL,CAAWd,GAAX,EAAeY,MAAf,CAAD,GAAwBb,IAAI,CAACa,MAAD,CAA/B;AACJ,aAFD;AAGL;AACH;;AAEDG,QAAAA,KAAK,GAAE;AACJ,eAAKd,QAAL,CAAcc,KAAd;AACF;;AAhC+C,O","sourcesContent":["\n\n\nimport Singleton  from '../Base/Singleton';\n\ninterface IItem{\n      func:Function,\n      ctx:unknown\n}\n\nexport default class EventManager extends Singleton{\n\n\n   static get Instance(){\n         return  super.GetInstance<EventManager>()\n   }\n   private eventDic:Map<string,Array<IItem>>=new Map();\n\n\n   on(eventName:string,func:Function,ctx?:unknown){\n      if(this.eventDic.has(eventName)){\n            this.eventDic.get(eventName).push({func,ctx});\n      }else{\n            this.eventDic.set(eventName,[{func,ctx}])\n      }\n   }\n   off(eventName:string,func:Function){\n      if(this.eventDic.has(eventName)){\n            const index=this.eventDic.get(eventName).findIndex((i)=>i.func===func);\n            index>-1&&this.eventDic.get(eventName).splice(index,1);\n      }\n   }\n   emit(eventName:string,...params:unknown[]){\n      if(this.eventDic.has(eventName)){\n            this.eventDic.get(eventName).forEach(({func,ctx})=>{\n                 ctx?func.apply(ctx,params):func(params);\n            })\n      }\n   }\n\n   clear(){\n      this.eventDic.clear();\n   }\n}\n\n\n"]}