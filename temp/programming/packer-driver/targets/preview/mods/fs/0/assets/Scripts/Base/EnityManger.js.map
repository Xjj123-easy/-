{"version":3,"sources":["file:///E:/cocosproject/Dome/cocos-start-demo/assets/Scripts/Base/EnityManger.ts"],"names":["_decorator","Component","Sprite","UITransform","PARAMS_NAME_ENUM","DIRECTION_ORDER_ENUM","randombyLength","ccclass","property","TILE_HEIGHT","TILE_WIDTH","ANIMATION_SPEED","EnityManger","state","_state","newState","fsm","setParams","error","console","log","direction","_direction","newdirection","DRIECTION","init","params","sprite","node","addComponent","sizeMode","SizeMode","CUSTOM","transfrom","getComponent","setContentSize","x","y","update","setPosition","onDestroy"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACEA,MAAAA,U,OAAAA,U;AACAC,MAAAA,S,OAAAA,S;AACAC,MAAAA,M,OAAAA,M;AACAC,MAAAA,W,OAAAA,W;;AASAC,MAAAA,gB,iBAAAA,gB;AAGAC,MAAAA,oB,iBAAAA,oB;;AAMOC,MAAAA,c,iBAAAA,c;;;;;;;OACH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBR,U;;6BAEjBS,W,GAAc,E;;4BACdC,U,GAAa,E;;iCACbC,e,GAAkB,IAAI,C;;6BAEtBC,W,WADZL,OAAO,CAAC,aAAD,C,yBAAR,MACaK,WADb,SACiCX,SADjC,CAC2C;AAAA;AAAA;;AAAA,sCAC5B;AAAA;AAAA,gDAAe,EAAf,CAD4B;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAShC,YAALY,KAAK,GAAG;AACV,iBAAO,KAAKC,MAAZ;AACD;;AAEQ,YAALD,KAAK,CAACE,QAAD,EAA8B;AACrC,eAAKD,MAAL,GAAcC,QAAd;;AACA,cAAI;AAAA;;AACF,0EAAMC,GAAN,wDAAWC,SAAX,CAAqBF,QAArB,EAA+B,IAA/B;AACD,WAFD,CAEE,OAAOG,KAAP,EAAc;AACdC,YAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACD;AACF;;AACY,YAATC,SAAS,GAAG;AACd,iBAAO,KAAKC,UAAZ;AACD;;AAEY,YAATD,SAAS,CAACE,YAAD,EAA+B;AAC1C,eAAKD,UAAL,GAAkBC,YAAlB;;AACA,cAAI;AAAA;;AACF,2EAAMP,GAAN,0DAAWC,SAAX,CAAqB;AAAA;AAAA,sDAAiBO,SAAtC,EAAiD;AAAA;AAAA,8DAAqB,KAAKF,UAA1B,CAAjD;AACD,WAFD,CAEE,OAAOJ,KAAP,EAAc;AACdC,YAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACD;AACF;;AACDK,QAAAA,IAAI,CAACC,MAAD,EAAkB;AACpB,cAAMC,MAAM,GAAG,KAAKC,IAAL,CAAUC,YAAV,CAAuB3B,MAAvB,CAAf;AAEAyB,UAAAA,MAAM,CAACG,QAAP,GAAkB5B,MAAM,CAAC6B,QAAP,CAAgBC,MAAlC;AAEA,eAAKC,SAAL,GAAiB,KAAKC,YAAL,CAAkB/B,WAAlB,CAAjB;AAEA,eAAK8B,SAAL,CAAeE,cAAf,CAA8BzB,UAAU,GAAG,CAA3C,EAA8CD,WAAW,GAAG,CAA5D;AAEA,eAAK2B,CAAL,GAASV,MAAM,CAACU,CAAhB;AAEA,eAAKC,CAAL,GAASX,MAAM,CAACW,CAAhB;AAEA,eAAKhB,SAAL,GAAiBK,MAAM,CAACL,SAAxB;AAEA,eAAKR,KAAL,GAAaa,MAAM,CAACb,KAApB;AACD;;AACDyB,QAAAA,MAAM,GAAG;AACP,eAAKV,IAAL,CAAUW,WAAV,CAAsB,KAAKH,CAAL,GAAS1B,UAA/B,EAA2C,CAAC,KAAK2B,CAAN,GAAU5B,WAArD;AACD;;AACD+B,QAAAA,SAAS,GAAG,CAAE;;AArD2B,O","sourcesContent":["import {\n  _decorator,\n  Component,\n  Sprite,\n  UITransform,\n  animation,\n  AnimationClip,\n  SpriteFrame,\n  AnimationComponent,\n} from 'cc'\nimport {\n  CONTROLLER_ENMU,\n  EVENTMANAGER,\n  PARAMS_NAME_ENUM,\n  DRIECTION_ENUM,\n  ENTINY_STATE_ENUM,\n  DIRECTION_ORDER_ENUM,\n  ENTITY_TYPE_ENUM,\n} from '../../Enums'\n\nimport { StateMachine } from '../Base/StateMachine'\nimport { IEntity } from '../../Level'\nimport { randombyLength } from '../Utiils'\nconst { ccclass, property } = _decorator\n\nexport const TILE_HEIGHT = 55\nexport const TILE_WIDTH = 55\nexport const ANIMATION_SPEED = 1 / 8\n@ccclass('EnityManger')\nexport class EnityManger extends Component {\n  id: string = randombyLength(12)\n  x: number\n  y: number\n  fsm: StateMachine //状态机\n  _direction: DRIECTION_ENUM\n  _state: ENTINY_STATE_ENUM\n  type: ENTITY_TYPE_ENUM\n  transfrom: UITransform\n  get state() {\n    return this._state\n  }\n\n  set state(newState: ENTINY_STATE_ENUM) {\n    this._state = newState\n    try {\n      this?.fsm?.setParams(newState, true)\n    } catch (error) {\n      console.log(this)\n    }\n  }\n  get direction() {\n    return this._direction\n  }\n\n  set direction(newdirection: DRIECTION_ENUM) {\n    this._direction = newdirection\n    try {\n      this?.fsm?.setParams(PARAMS_NAME_ENUM.DRIECTION, DIRECTION_ORDER_ENUM[this._direction])\n    } catch (error) {\n      console.log(this)\n    }\n  }\n  init(params: IEntity) {\n    const sprite = this.node.addComponent(Sprite)\n\n    sprite.sizeMode = Sprite.SizeMode.CUSTOM\n\n    this.transfrom = this.getComponent(UITransform)\n\n    this.transfrom.setContentSize(TILE_WIDTH * 4, TILE_HEIGHT * 4)\n\n    this.x = params.x\n\n    this.y = params.y\n\n    this.direction = params.direction\n\n    this.state = params.state\n  }\n  update() {\n    this.node.setPosition(this.x * TILE_WIDTH, -this.y * TILE_HEIGHT)\n  }\n  onDestroy() {}\n}\n"]}