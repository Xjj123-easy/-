{"version":3,"sources":["file:///E:/cocosproject/Dome/cocos-start-demo/assets/Scripts/Audio/AudioManager.ts"],"names":["assert","AudioSource","Component","_decorator","ccclass","AudioManager","init","audioSource","addComponent","playMusic","loop","clip","playing","play","Promise","re","AudioResolve","playSound","name","volumeScale","playOneShot","stop","destory","node","removeFromParent"],"mappings":";;;;;;;;;;AAASA,MAAAA,M,OAAAA,M;AAAmBC,MAAAA,W,OAAAA,W;AAAaC,MAAAA,S,OAAAA,S;AAAWC,MAAAA,U,OAAAA,U;;;;;;;OAC9C;AAAEC,QAAAA;AAAF,O,GAAcD,U;;8BAEPE,Y,WADZD,OAAO,CAAC,cAAD,C,yBAAR,MACaC,YADb,SACkCH,SADlC,CAC4C;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAG1CI,QAAAA,IAAI,GAAG;AACL,eAAKC,WAAL,GAAmB,KAAKC,YAAL,CAAkBP,WAAlB,CAAnB;AACD;AACD;AACF;AACA;AACA;AACA;AACA;;;AAEEQ,QAAAA,SAAS,CAACC,IAAD,EAAwBC,IAAxB,EAAgD;AAAA,cAA/CD,IAA+C;AAA/CA,YAAAA,IAA+C,GAA/B,KAA+B;AAAA;;AAAA,cAAxBC,IAAwB;AAAxBA,YAAAA,IAAwB,GAAN,IAAM;AAAA;;AACvD;AACA,eAAKJ,WAAL,CAAiBI,IAAjB,GAAwBA,IAAxB;AACAX,UAAAA,MAAM,CAAC,KAAKO,WAAN,EAAmB,0BAAnB,CAAN;AACA,eAAKA,WAAL,CAAiBG,IAAjB,GAAwBA,IAAxB;;AACA,cAAI,CAAC,KAAKH,WAAL,CAAiBK,OAAtB,EAA+B;AAC7B,iBAAKL,WAAL,CAAiBM,IAAjB;AACD;;AACD,iBAAO,IAAIC,OAAJ,CAAYC,EAAE,IAAI;AACvB,iBAAKC,YAAL,GAAoBD,EAApB;AACD,WAFM,CAAP;AAGD;AACD;AACF;AACA;AACA;AACA;;;AACEE,QAAAA,SAAS,CAACC,IAAD,EAAyBC,WAAzB,EAAkD;AAAA,cAAjDD,IAAiD;AAAjDA,YAAAA,IAAiD,GAA/B,IAA+B;AAAA;;AAAA,cAAzBC,WAAyB;AAAzBA,YAAAA,WAAyB,GAAH,CAAG;AAAA;;AACzD,cAAMZ,WAAW,GAAG,KAAKA,WAAzB;AACAP,UAAAA,MAAM,CAACO,WAAD,EAAc,0BAAd,CAAN,CAFyD,CAIzD;;AACAA,UAAAA,WAAW,CAACa,WAAZ,CAAwBF,IAAxB,EAA8BC,WAA9B;AACD;;AACDE,QAAAA,IAAI,GAAG;AACL,eAAKd,WAAL,CAAiBc,IAAjB;AACD;;AACDC,QAAAA,OAAO,GAAG;AACR,eAAKC,IAAL,CAAUC,gBAAV;AACD;;AA1CyC,O","sourcesContent":["import { assert, AudioClip, AudioSource, Component, _decorator } from 'cc'\nconst { ccclass } = _decorator\n@ccclass('AudioManager')\nexport class AudioManager extends Component {\n  private audioSource?: AudioSource\n  private AudioResolve: (value: PromiseLike<null>) => void\n  init() {\n    this.audioSource = this.addComponent(AudioSource)\n  }\n  /**\n   * 播放音乐\n   * @param loop 是否循环播放音乐\n\n   * @param clip 音乐文件\n   * @returns\n   */\n  playMusic(loop: boolean = false, clip: AudioClip = null) {\n    // const audioSource = this.audioSource\n    this.audioSource.clip = clip\n    assert(this.audioSource, 'AudioManager not inited!')\n    this.audioSource.loop = loop\n    if (!this.audioSource.playing) {\n      this.audioSource.play()\n    }\n    return new Promise(re => {\n      this.AudioResolve = re\n    })\n  }\n  /**\n   * 播放音效\n   * @param {String} name 音效名称\n   * @param {Number} volumeScale 播放音量倍数\n   */\n  playSound(name: AudioClip = null, volumeScale: number = 1) {\n    const audioSource = this.audioSource\n    assert(audioSource, 'AudioManager not inited!')\n\n    // 注意：第二个参数 “volumeScale” 是指播放音量的倍数，最终播放的音量为 “audioSource.volume * volumeScale”\n    audioSource.playOneShot(name, volumeScale)\n  }\n  stop() {\n    this.audioSource.stop()\n  }\n  destory() {\n    this.node.removeFromParent()\n  }\n}\n"]}