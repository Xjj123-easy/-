{"version":3,"sources":["file:///E:/cocosproject/Dome/cocos-start-demo/assets/Scripts/Player/PlayerManager.ts"],"names":["_decorator","CONTROLLER_ENMU","EVENTMANAGER","DRIECTION_ENUM","ENTINY_STATE_ENUM","SHAKE_DIRECTION_ENMU","EventManager","PlayerStateMachine","EnityManger","DataManager","MusicManager","ccclass","property","TILE_HEIGHT","TILE_WIDTH","ANIMATION_SPEED","PlayerManager","init","params","fsm","addComponent","targetX","x","targetY","y","Instance","on","PLAYER_CONTROLLER","inputhandler","ATTACK_PLAYER","Dead","onDestroy","off","onAttackShake","type","emit","SHAKE_SHOW","update","updateXY","speeed","Math","abs","isMoveing","PLAYERMOVE_END","inputs","clip","state","AIRDEATH","DEATH","ATTACK","id","willAttack","RECORD_STEP","ATTACK_ENEMY","DOOR_OPEN","sound","willblock","TOP","BOTTOM","LEFT","RIGHT","TURN_LEFT","direction","TURN_RIGHT","move","ctx","showsmoke","tileInfo","mapRowCount","row","mapColumnCount","column","doorX","doorY","doorState","door","burst","filter","e","enemes","playerNextY","BLOCKFRONT","weaponNextY","nextPlayerTile","nextWeaponTile","i","length","enemy","enemyX","enemyY","some","turnable","moveable","BLOCKBACK","BLOCKLEFT","weaponNextX","BLOCKRIGHT","playerNextX","nextX","nextY","BLOCKTURNLEFT","BLOCKTURNRIGHT","SMOKE_SHOW","enemies","IDLE"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACEA,MAAAA,U,OAAAA,U;;AAWAC,MAAAA,e,iBAAAA,e;AACAC,MAAAA,Y,iBAAAA,Y;AAEAC,MAAAA,c,iBAAAA,c;AACAC,MAAAA,iB,iBAAAA,iB;AAGAC,MAAAA,oB,iBAAAA,oB;;AAEKC,MAAAA,Y;;AAEEC,MAAAA,kB,iBAAAA,kB;;AAEAC,MAAAA,W,iBAAAA,W;;AACFC,MAAAA,W;;AAEAC,MAAAA,Y;;;;;;;OACD;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBZ,U;;6BAEjBa,W,GAAc,E;;4BACdC,U,GAAa,E;;iCACbC,e,GAAkB,IAAI,C;;+BAEtBC,a,WADZL,OAAO,CAAC,eAAD,C,yBAAR,MACaK,aADb;AAAA;AAAA,sCAC+C;AAAA;AAAA;;AAAA,0CACnB,IAAI,EADe;;AAAA,6CAExB,KAFwB;;AAAA;;AAAA;;AAAA,wCAKzB,EALyB;AAAA;;AAMnC,cAAJC,IAAI,CAACC,MAAD,EAAkB;AAC1B,eAAKC,GAAL,GAAW,KAAKC,YAAL;AAAA;AAAA,uDAAX;AAEA,gBAAM,KAAKD,GAAL,CAASF,IAAT,EAAN;AAEA,gBAAMA,IAAN,CAAWC,MAAX;AAEA,eAAKG,OAAL,GAAe,KAAKC,CAApB;AACA,eAAKC,OAAL,GAAe,KAAKC,CAApB;AAEA;AAAA;AAAA,4CAAaC,QAAb,CAAsBC,EAAtB,CAAyB;AAAA;AAAA,4CAAaC,iBAAtC,EAAyD,KAAKC,YAA9D,EAA4E,IAA5E;AACA;AAAA;AAAA,4CAAaH,QAAb,CAAsBC,EAAtB,CAAyB;AAAA;AAAA,4CAAaG,aAAtC,EAAqD,KAAKC,IAA1D,EAAgE,IAAhE;AACD;;AACDC,QAAAA,SAAS,GAAG;AACV,gBAAMA,SAAN;AAEA;AAAA;AAAA,4CAAaN,QAAb,CAAsBO,GAAtB,CAA0B;AAAA;AAAA,4CAAaL,iBAAvC,EAA0D,KAAKC,YAA/D;AACA;AAAA;AAAA,4CAAaH,QAAb,CAAsBO,GAAtB,CAA0B;AAAA;AAAA,4CAAaH,aAAvC,EAAsD,KAAKC,IAA3D;AACD;;AAEDG,QAAAA,aAAa,CAACC,IAAD,EAA6B;AACxC;AAAA;AAAA,4CAAaT,QAAb,CAAsBU,IAAtB,CAA2B;AAAA;AAAA,4CAAaC,UAAxC,EAAoDF,IAApD;AACD;;AACDG,QAAAA,MAAM,GAAG;AACP,gBAAMA,MAAN;AACA,eAAKC,QAAL;AACD;;AACDA,QAAAA,QAAQ,GAAG;AACT,cAAI,KAAKhB,CAAL,GAAS,KAAKD,OAAlB,EAA2B;AACzB,iBAAKC,CAAL,IAAU,KAAKiB,MAAf;AACD,WAFD,MAEO,IAAI,KAAKjB,CAAL,GAAS,KAAKD,OAAlB,EAA2B;AAChC,iBAAKC,CAAL,IAAU,KAAKiB,MAAf;AACD;;AAED,cAAI,KAAKf,CAAL,GAAS,KAAKD,OAAlB,EAA2B;AACzB,iBAAKC,CAAL,IAAU,KAAKe,MAAf;AACD,WAFD,MAEO,IAAI,KAAKf,CAAL,GAAS,KAAKD,OAAlB,EAA2B;AAChC,iBAAKC,CAAL,IAAU,KAAKe,MAAf;AACD;;AAED,cAAIC,IAAI,CAACC,GAAL,CAAS,KAAKnB,CAAL,GAAS,KAAKD,OAAvB,KAAmC,IAAnC,IAA2CmB,IAAI,CAACC,GAAL,CAAS,KAAKjB,CAAL,GAAS,KAAKD,OAAvB,KAAmC,IAA9E,IAAsF,KAAKmB,SAAL,KAAmB,IAA7G,EAAmH;AACjH,iBAAKpB,CAAL,GAAS,KAAKD,OAAd;AACA,iBAAKG,CAAL,GAAS,KAAKD,OAAd;AACA,iBAAKmB,SAAL,GAAiB,KAAjB;AACA;AAAA;AAAA,8CAAajB,QAAb,CAAsBU,IAAtB,CAA2B;AAAA;AAAA,8CAAaQ,cAAxC;AACD;AACF;;AAEDf,QAAAA,YAAY,CAACgB,MAAD,EAA0BC,IAA1B,EAA6C;AACvD,eAAKA,IAAL,GAAYA,IAAZ;;AACA,cACE,KAAKC,KAAL,KAAe;AAAA;AAAA,sDAAkBC,QAAjC,IACA,KAAKD,KAAL,KAAe;AAAA;AAAA,sDAAkBE,KADjC,IAEA,KAAKF,KAAL,KAAe;AAAA;AAAA,sDAAkBG,MAHnC,EAIE;AACA;AACD;;AACD,cAAI,KAAKP,SAAT,EAAoB;AAClB;AACD;;AACD,gBAAMQ,EAAE,GAAG,KAAKC,UAAL,CAAgBP,MAAhB,CAAX;;AACA,cAAIM,EAAJ,EAAQ;AACN;AAAA;AAAA,8CAAazB,QAAb,CAAsBU,IAAtB,CAA2B;AAAA;AAAA,8CAAaiB,WAAxC;AACA;AAAA;AAAA,8CAAa3B,QAAb,CAAsBU,IAAtB,CAA2B;AAAA;AAAA,8CAAakB,YAAxC,EAAsDH,EAAtD;AACA;AAAA;AAAA,8CAAazB,QAAb,CAAsBU,IAAtB,CAA2B;AAAA;AAAA,8CAAamB,SAAxC;AACA;AAAA;AAAA,8CAAa7B,QAAb,CAAsBU,IAAtB,CAA2B;AAAA;AAAA,8CAAaQ,cAAxC;AACA;AAAA;AAAA,8CAAalB,QAAb,CAAsB8B,KAAtB,CAA4BV,IAAI,CAAC,CAAD,CAAhC;AACA;AACD;;AACD,cAAI,KAAKW,SAAL,CAAeZ,MAAf,CAAJ,EAA4B;AAC1B,gBAAIA,MAAM,KAAK;AAAA;AAAA,oDAAgBa,GAA/B,EAAoC;AAClC;AAAA;AAAA,gDAAahC,QAAb,CAAsBU,IAAtB,CAA2B;AAAA;AAAA,gDAAaC,UAAxC,EAAoD;AAAA;AAAA,gEAAqBqB,GAAzE;AACD,aAFD,MAEO,IAAIb,MAAM,KAAK;AAAA;AAAA,oDAAgBc,MAA/B,EAAuC;AAC5C;AAAA;AAAA,gDAAajC,QAAb,CAAsBU,IAAtB,CAA2B;AAAA;AAAA,gDAAaC,UAAxC,EAAoD;AAAA;AAAA,gEAAqBsB,MAAzE;AACD,aAFM,MAEA,IAAId,MAAM,KAAK;AAAA;AAAA,oDAAgBe,IAA/B,EAAqC;AAC1C;AAAA;AAAA,gDAAalC,QAAb,CAAsBU,IAAtB,CAA2B;AAAA;AAAA,gDAAaC,UAAxC,EAAoD;AAAA;AAAA,gEAAqBuB,IAAzE;AACD,aAFM,MAEA,IAAIf,MAAM,KAAK;AAAA;AAAA,oDAAgBgB,KAA/B,EAAsC;AAC3C;AAAA;AAAA,gDAAanC,QAAb,CAAsBU,IAAtB,CAA2B;AAAA;AAAA,gDAAaC,UAAxC,EAAoD;AAAA;AAAA,gEAAqBwB,KAAzE;AACD,aAFM,MAEA,IAAIhB,MAAM,KAAK;AAAA;AAAA,oDAAgBiB,SAA3B,IAAwC,KAAKC,SAAL,KAAmB;AAAA;AAAA,kDAAeL,GAA9E,EAAmF;AACxF;AAAA;AAAA,gDAAahC,QAAb,CAAsBU,IAAtB,CAA2B;AAAA;AAAA,gDAAaC,UAAxC,EAAoD;AAAA;AAAA,gEAAqBuB,IAAzE;AACD,aAFM,MAEA,IAAIf,MAAM,KAAK;AAAA;AAAA,oDAAgBiB,SAA3B,IAAwC,KAAKC,SAAL,KAAmB;AAAA;AAAA,kDAAeH,IAA9E,EAAoF;AACzF;AAAA;AAAA,gDAAalC,QAAb,CAAsBU,IAAtB,CAA2B;AAAA;AAAA,gDAAaC,UAAxC,EAAoD;AAAA;AAAA,gEAAqBsB,MAAzE;AACD,aAFM,MAEA,IAAId,MAAM,KAAK;AAAA;AAAA,oDAAgBiB,SAA3B,IAAwC,KAAKC,SAAL,KAAmB;AAAA;AAAA,kDAAeJ,MAA9E,EAAsF;AAC3F;AAAA;AAAA,gDAAajC,QAAb,CAAsBU,IAAtB,CAA2B;AAAA;AAAA,gDAAaC,UAAxC,EAAoD;AAAA;AAAA,gEAAqBwB,KAAzE;AACD,aAFM,MAEA,IAAIhB,MAAM,KAAK;AAAA;AAAA,oDAAgBiB,SAA3B,IAAwC,KAAKC,SAAL,KAAmB;AAAA;AAAA,kDAAeF,KAA9E,EAAqF;AAC1F;AAAA;AAAA,gDAAanC,QAAb,CAAsBU,IAAtB,CAA2B;AAAA;AAAA,gDAAaC,UAAxC,EAAoD;AAAA;AAAA,gEAAqBqB,GAAzE;AACD,aAFM,MAEA,IAAIb,MAAM,KAAK;AAAA;AAAA,oDAAgBmB,UAA3B,IAAyC,KAAKD,SAAL,KAAmB;AAAA;AAAA,kDAAeL,GAA/E,EAAoF;AACzF;AAAA;AAAA,gDAAahC,QAAb,CAAsBU,IAAtB,CAA2B;AAAA;AAAA,gDAAaC,UAAxC,EAAoD;AAAA;AAAA,gEAAqBwB,KAAzE;AACD,aAFM,MAEA,IAAIhB,MAAM,KAAK;AAAA;AAAA,oDAAgBmB,UAA3B,IAAyC,KAAKD,SAAL,KAAmB;AAAA;AAAA,kDAAeH,IAA/E,EAAqF;AAC1F;AAAA;AAAA,gDAAalC,QAAb,CAAsBU,IAAtB,CAA2B;AAAA;AAAA,gDAAaC,UAAxC,EAAoD;AAAA;AAAA,gEAAqBqB,GAAzE;AACD,aAFM,MAEA,IAAIb,MAAM,KAAK;AAAA;AAAA,oDAAgBmB,UAA3B,IAAyC,KAAKD,SAAL,KAAmB;AAAA;AAAA,kDAAeJ,MAA/E,EAAuF;AAC5F;AAAA;AAAA,gDAAajC,QAAb,CAAsBU,IAAtB,CAA2B;AAAA;AAAA,gDAAaC,UAAxC,EAAoD;AAAA;AAAA,gEAAqBuB,IAAzE;AACD,aAFM,MAEA,IAAIf,MAAM,KAAK;AAAA;AAAA,oDAAgBmB,UAA3B,IAAyC,KAAKD,SAAL,KAAmB;AAAA;AAAA,kDAAeF,KAA/E,EAAsF;AAC3F;AAAA;AAAA,gDAAanC,QAAb,CAAsBU,IAAtB,CAA2B;AAAA;AAAA,gDAAaC,UAAxC,EAAoD;AAAA;AAAA,gEAAqBsB,MAAzE;AACD;;AACD;AAAA;AAAA,8CAAajC,QAAb,CAAsB8B,KAAtB,CAA4BV,IAAI,CAAC,CAAD,CAAhC;AAEA;AACD;;AAED,eAAKmB,IAAL,CAAUpB,MAAV;AACA;AAAA;AAAA,4CAAanB,QAAb,CAAsB8B,KAAtB,CAA4BV,IAAI,CAAC,CAAD,CAAhC;AACD;AACD;AACF;AACA;AACA;;;AACEf,QAAAA,IAAI,CAACI,IAAD,EAA0B+B,GAA1B,EAAqC;AACvC,eAAKnB,KAAL,GAAaZ,IAAb;AAEA;AAAA;AAAA,4CAAaT,QAAb,CAAsB8B,KAAtB,CAA4B,KAAKV,IAAL,CAAU,CAAV,CAA5B;AACD;AACD;AACF;AACA;AACA;;;AACEmB,QAAAA,IAAI,CAACpB,MAAD,EAA0B;AAC5B;AAAA;AAAA,4CAAanB,QAAb,CAAsBU,IAAtB,CAA2B;AAAA;AAAA,4CAAaiB,WAAxC;;AACA,kBAAQR,MAAR;AACE,iBAAK;AAAA;AAAA,oDAAgBa,GAArB;AACE,mBAAKlC,OAAL,IAAgB,CAAhB;AACA,mBAAKmB,SAAL,GAAiB,IAAjB;AACA,mBAAKwB,SAAL,CAAe;AAAA;AAAA,oDAAeT,GAA9B;AACA;;AACF,iBAAK;AAAA;AAAA,oDAAgBC,MAArB;AACE,mBAAKnC,OAAL,IAAgB,CAAhB;AACA,mBAAKmB,SAAL,GAAiB,IAAjB;AACA,mBAAKwB,SAAL,CAAe;AAAA;AAAA,oDAAeR,MAA9B;AACA;;AACF,iBAAK;AAAA;AAAA,oDAAgBC,IAArB;AACE,mBAAKtC,OAAL,IAAgB,CAAhB;AACA,mBAAKqB,SAAL,GAAiB,IAAjB;AACA,mBAAKwB,SAAL,CAAe;AAAA;AAAA,oDAAeP,IAA9B;AACA;;AACF,iBAAK;AAAA;AAAA,oDAAgBC,KAArB;AACE,mBAAKvC,OAAL,IAAgB,CAAhB;AACA,mBAAKqB,SAAL,GAAiB,IAAjB;AACA,mBAAKwB,SAAL,CAAe;AAAA;AAAA,oDAAeN,KAA9B;AACA;;AACF,iBAAK;AAAA;AAAA,oDAAgBC,SAArB;AACE,mBAAKf,KAAL,GAAa;AAAA;AAAA,0DAAkBe,SAA/B;;AACA,kBAAI,KAAKC,SAAL,KAAmB;AAAA;AAAA,oDAAeL,GAAtC,EAA2C;AACzC,qBAAKK,SAAL,GAAiB;AAAA;AAAA,sDAAeH,IAAhC;AACD,eAFD,MAEO,IAAI,KAAKG,SAAL,KAAmB;AAAA;AAAA,oDAAeH,IAAtC,EAA4C;AACjD,qBAAKG,SAAL,GAAiB;AAAA;AAAA,sDAAeJ,MAAhC;AACD,eAFM,MAEA,IAAI,KAAKI,SAAL,KAAmB;AAAA;AAAA,oDAAeJ,MAAtC,EAA8C;AACnD,qBAAKI,SAAL,GAAiB;AAAA;AAAA,sDAAeF,KAAhC;AACD,eAFM,MAEA,IAAI,KAAKE,SAAL,KAAmB;AAAA;AAAA,oDAAeF,KAAtC,EAA6C;AAClD,qBAAKE,SAAL,GAAiB;AAAA;AAAA,sDAAeL,GAAhC;AACD;;AAED;AAAA;AAAA,gDAAahC,QAAb,CAAsBU,IAAtB,CAA2B;AAAA;AAAA,gDAAaQ,cAAxC;AAEA;;AACF,iBAAK;AAAA;AAAA,oDAAgBoB,UAArB;AACE,kBAAI,KAAKD,SAAL,KAAmB;AAAA;AAAA,oDAAeH,IAAtC,EAA4C;AAC1C,qBAAKG,SAAL,GAAiB;AAAA;AAAA,sDAAeL,GAAhC;AACD,eAFD,MAEO,IAAI,KAAKK,SAAL,KAAmB;AAAA;AAAA,oDAAeF,KAAtC,EAA6C;AAClD,qBAAKE,SAAL,GAAiB;AAAA;AAAA,sDAAeJ,MAAhC;AACD,eAFM,MAEA,IAAI,KAAKI,SAAL,KAAmB;AAAA;AAAA,oDAAeJ,MAAtC,EAA8C;AACnD,qBAAKI,SAAL,GAAiB;AAAA;AAAA,sDAAeH,IAAhC;AACD,eAFM,MAEA,IAAI,KAAKG,SAAL,KAAmB;AAAA;AAAA,oDAAeL,GAAtC,EAA2C;AAChD,qBAAKK,SAAL,GAAiB;AAAA;AAAA,sDAAeF,KAAhC;AACD;;AACD,mBAAKd,KAAL,GAAa;AAAA;AAAA,0DAAkBiB,UAA/B;AACA;AAAA;AAAA,gDAAatC,QAAb,CAAsBU,IAAtB,CAA2B;AAAA;AAAA,gDAAaQ,cAAxC;AAEA;;AACF;AACE;AAnDJ;AAqDD;;AAEDa,QAAAA,SAAS,CAACZ,MAAD,EAA0B;AACjC,gBAAM;AAAEvB,YAAAA,OAAO,EAAEC,CAAX;AAAcC,YAAAA,OAAO,EAAEC,CAAvB;AAA0BsC,YAAAA;AAA1B,cAAwC,IAA9C;AACA,gBAAM;AAAEK,YAAAA;AAAF,cAAe;AAAA;AAAA,0CAAY1C,QAAjC;AACA,gBAAM;AAAE2C,YAAAA,WAAW,EAAEC,GAAf;AAAoBC,YAAAA,cAAc,EAAEC;AAApC,cAA+C;AAAA;AAAA,0CAAY9C,QAAjE;AACA,gBAAM;AAAEH,YAAAA,CAAC,EAAEkD,KAAL;AAAYhD,YAAAA,CAAC,EAAEiD,KAAf;AAAsB3B,YAAAA,KAAK,EAAE4B;AAA7B,cAA2C;AAAA;AAAA,0CAAYjD,QAAZ,CAAqBkD,IAArB,IAA6B,EAA9E;AACA,gBAAMC,KAAK,GAAG;AAAA;AAAA,0CAAYnD,QAAZ,CAAqBmD,KAArB,CAA2BC,MAA3B,CAAkCC,CAAC,IAAIA,CAAC,CAAChC,KAAF,KAAY;AAAA;AAAA,sDAAkBE,KAArE,CAAd;AACA,gBAAM+B,MAAM,GAAG;AAAA;AAAA,0CAAYtD,QAAZ,CAAqBsD,MAArB,CAA4BF,MAA5B,CAAmCC,CAAC,IAAIA,CAAC,CAAChC,KAAF,KAAY;AAAA;AAAA,sDAAkBE,KAAtE,CAAf,CANiC,CAOjC;;AACA,cAAIJ,MAAM,KAAK;AAAA;AAAA,kDAAgBa,GAA/B,EAAoC;AAClC,kBAAMuB,WAAW,GAAGxD,CAAC,GAAG,CAAxB,CADkC,CAGlC;;AACA,gBAAIsC,SAAS,KAAK;AAAA;AAAA,kDAAeL,GAAjC,EAAsC;AAAA;;AACpC;AACA,kBAAIuB,WAAW,GAAG,CAAlB,EAAqB;AACnB,qBAAKlC,KAAL,GAAa;AAAA;AAAA,4DAAkBmC,UAA/B;AACA,uBAAO,IAAP;AACD;;AAED,oBAAMC,WAAW,GAAG1D,CAAC,GAAG,CAAxB;AACA,oBAAM2D,cAAc,kBAAGhB,QAAQ,CAAC7C,CAAD,CAAX,gDAAG,YAAc0D,WAAd,CAAvB;AACA,oBAAMI,cAAc,mBAAGjB,QAAQ,CAAC7C,CAAD,CAAX,iDAAG,aAAc4D,WAAd,CAAvB,CAToC,CAWpC;;AACA,kBACE,CAAEF,WAAW,KAAKP,KAAhB,IAAyBD,KAAK,KAAKlD,CAApC,IAA2CkD,KAAK,KAAKlD,CAAV,IAAe4D,WAAW,KAAKT,KAA3E,KACAC,SAAS,KAAK;AAAA;AAAA,0DAAkB1B,KAFlC,EAGE;AACA;AACA,qBAAKF,KAAL,GAAa;AAAA;AAAA,4DAAkBmC,UAA/B;AACA,uBAAO,IAAP;AACD,eAnBmC,CAqBpC;;;AACA,mBAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,MAAM,CAACO,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACtC,sBAAME,KAAK,GAAGR,MAAM,CAACM,CAAD,CAApB;AACA,sBAAM;AAAE/D,kBAAAA,CAAC,EAAEkE,MAAL;AAAahE,kBAAAA,CAAC,EAAEiE;AAAhB,oBAA2BF,KAAjC;;AACA,oBAAKP,WAAW,KAAKS,MAAhB,IAA0BD,MAAM,KAAKlE,CAAtC,IAA6CkE,MAAM,KAAKlE,CAAX,IAAgB4D,WAAW,KAAKO,MAAjF,EAA0F;AACxF;AACA,uBAAK3C,KAAL,GAAa;AAAA;AAAA,8DAAkBmC,UAA/B;AACA,yBAAO,IAAP;AACD;AACF,eA9BmC,CA+BpC;;;AACA,kBACEL,KAAK,CAACc,IAAN,CAAWd,KAAK,IAAIA,KAAK,CAACtD,CAAN,KAAYA,CAAZ,IAAiBsD,KAAK,CAACpD,CAAN,KAAYwD,WAAjD,MACC,CAACI,cAAD,IAAmBA,cAAc,CAACO,QADnC,CADF,EAGE;AACA,uBAAO,KAAP;AACD,eArCmC,CAsCpC;;;AACA,kBAAIR,cAAc,IAAIA,cAAc,CAACS,QAAjC,KAA8C,CAACR,cAAD,IAAmBA,cAAc,CAACO,QAAhF,CAAJ,EAA+F,CAC7F;AACD,eAFD,MAEO;AACL,qBAAK7C,KAAL,GAAa;AAAA;AAAA,4DAAkBmC,UAA/B;AACA,uBAAO,IAAP;AACD,eA5CmC,CA8CpC;;AACD,aA/CD,MA+CO,IAAInB,SAAS,KAAK;AAAA;AAAA,kDAAeJ,MAAjC,EAAyC;AAAA;;AAC9C;AACA,kBAAIsB,WAAW,GAAG,CAAlB,EAAqB;AACnB,qBAAKlC,KAAL,GAAa;AAAA;AAAA,4DAAkB+C,SAA/B;AACA,uBAAO,IAAP;AACD;;AAED,oBAAMX,WAAW,GAAG1D,CAApB;AACA,oBAAM2D,cAAc,mBAAGhB,QAAQ,CAAC7C,CAAD,CAAX,iDAAG,aAAc0D,WAAd,CAAvB;AACA,oBAAMI,cAAc,mBAAGjB,QAAQ,CAAC7C,CAAD,CAAX,iDAAG,aAAc4D,WAAd,CAAvB,CAT8C,CAU9C;;AACA,kBACE,CAAEF,WAAW,KAAKP,KAAhB,IAAyBD,KAAK,KAAKlD,CAApC,IAA2CkD,KAAK,KAAKlD,CAAV,IAAe4D,WAAW,KAAKT,KAA3E,KACAC,SAAS,KAAK;AAAA;AAAA,0DAAkB1B,KAFlC,EAGE;AACA;AAEA,qBAAKF,KAAL,GAAa;AAAA;AAAA,4DAAkB+C,SAA/B;AACA,uBAAO,IAAP;AACD,eAnB6C,CAqB9C;;;AACA,mBAAK,IAAIR,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,MAAM,CAACO,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACtC,sBAAME,KAAK,GAAGR,MAAM,CAACM,CAAD,CAApB;AACA,sBAAM;AAAE/D,kBAAAA,CAAC,EAAEkE,MAAL;AAAahE,kBAAAA,CAAC,EAAEiE;AAAhB,oBAA2BF,KAAjC;;AACA,oBAAIP,WAAW,KAAKS,MAAhB,IAA0BD,MAAM,KAAKlE,CAAzC,EAA4C;AAC1C;AACA,uBAAKwB,KAAL,GAAa;AAAA;AAAA,8DAAkB+C,SAA/B;AACA,yBAAO,IAAP;AACD;AACF,eA9B6C,CA+B9C;;;AACA,kBACEjB,KAAK,CAACc,IAAN,CAAWd,KAAK,IAAIA,KAAK,CAACtD,CAAN,KAAYA,CAAZ,IAAiBsD,KAAK,CAACpD,CAAN,KAAYwD,WAAjD,MACC,CAACI,cAAD,IAAmBA,cAAc,CAACO,QADnC,CADF,EAGE;AACA,uBAAO,KAAP;AACD,eArC6C,CAsC9C;;;AACA,kBAAIR,cAAc,IAAIA,cAAc,CAACS,QAAjC,KAA8C,CAACR,cAAD,IAAmBA,cAAc,CAACO,QAAhF,CAAJ,EAA+F,CAC7F;AACD,eAFD,MAEO;AACL,qBAAK7C,KAAL,GAAa;AAAA;AAAA,4DAAkB+C,SAA/B;AACA,uBAAO,IAAP;AACD,eA5C6C,CA8C9C;;AACD,aA/CM,MA+CA,IAAI/B,SAAS,KAAK;AAAA;AAAA,kDAAeH,IAAjC,EAAuC;AAAA;;AAC5C;AACA,kBAAIqB,WAAW,GAAG,CAAlB,EAAqB;AACnB,qBAAKlC,KAAL,GAAa;AAAA;AAAA,4DAAkBgD,SAA/B;AACA,uBAAO,IAAP;AACD;;AAED,oBAAMC,WAAW,GAAGzE,CAAC,GAAG,CAAxB;AACA,oBAAM4D,WAAW,GAAG1D,CAAC,GAAG,CAAxB;AACA,oBAAM2D,cAAc,mBAAGhB,QAAQ,CAAC7C,CAAD,CAAX,iDAAG,aAAc0D,WAAd,CAAvB;AACA,oBAAMI,cAAc,4BAAGjB,QAAQ,CAAC4B,WAAD,CAAX,0DAAG,sBAAwBb,WAAxB,CAAvB,CAV4C,CAY5C;;AACA,kBACE,CAAEF,WAAW,KAAKP,KAAhB,IAAyBD,KAAK,KAAKlD,CAApC,IAA2CkD,KAAK,KAAKuB,WAAV,IAAyBb,WAAW,KAAKT,KAArF,KACAC,SAAS,KAAK;AAAA;AAAA,0DAAkB1B,KAFlC,EAGE;AACA;AACA,qBAAKF,KAAL,GAAa;AAAA;AAAA,4DAAkBgD,SAA/B;AACA,uBAAO,IAAP;AACD,eApB2C,CAsB5C;;;AACA,mBAAK,IAAIT,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,MAAM,CAACO,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACtC,sBAAME,KAAK,GAAGR,MAAM,CAACM,CAAD,CAApB;AACA,sBAAM;AAAE/D,kBAAAA,CAAC,EAAEkE,MAAL;AAAahE,kBAAAA,CAAC,EAAEiE;AAAhB,oBAA2BF,KAAjC;;AACA,oBAAKP,WAAW,KAAKS,MAAhB,IAA0BD,MAAM,KAAKlE,CAAtC,IAA6C4D,WAAW,KAAKO,MAAhB,IAA0BD,MAAM,KAAKO,WAAtF,EAAoG;AAClG;AACA,uBAAKjD,KAAL,GAAa;AAAA;AAAA,8DAAkBgD,SAA/B;AACA,yBAAO,IAAP;AACD;AACF,eA/B2C,CAgC5C;;;AACA,kBACElB,KAAK,CAACc,IAAN,CAAWd,KAAK,IAAIA,KAAK,CAACtD,CAAN,KAAYA,CAAZ,IAAiBsD,KAAK,CAACpD,CAAN,KAAYwD,WAAjD,MACC,CAACI,cAAD,IAAmBA,cAAc,CAACO,QADnC,CADF,EAGE;AACA,uBAAO,KAAP;AACD,eAtC2C,CAwC5C;;;AACA,kBAAIR,cAAc,IAAIA,cAAc,CAACS,QAAjC,KAA8C,CAACR,cAAD,IAAmBA,cAAc,CAACO,QAAhF,CAAJ,EAA+F,CAC7F;AACD,eAFD,MAEO;AACL,qBAAK7C,KAAL,GAAa;AAAA;AAAA,4DAAkBkD,UAA/B;AACA,uBAAO,IAAP;AACD,eA9C2C,CAgD5C;;AACD,aAjDM,MAiDA,IAAIlC,SAAS,KAAK;AAAA;AAAA,kDAAeF,KAAjC,EAAwC;AAAA;;AAC7C;AACA,kBAAIoB,WAAW,GAAG,CAAlB,EAAqB;AACnB,qBAAKlC,KAAL,GAAa;AAAA;AAAA,4DAAkBkD,UAA/B;AACA,uBAAO,IAAP;AACD;;AAED,oBAAMD,WAAW,GAAGzE,CAAC,GAAG,CAAxB;AACA,oBAAM4D,WAAW,GAAG1D,CAAC,GAAG,CAAxB;AACA,oBAAM2D,cAAc,mBAAGhB,QAAQ,CAAC7C,CAAD,CAAX,iDAAG,aAAc0D,WAAd,CAAvB;AACA,oBAAMI,cAAc,6BAAGjB,QAAQ,CAAC4B,WAAD,CAAX,2DAAG,uBAAwBb,WAAxB,CAAvB,CAV6C,CAY7C;;AACA,kBACE,CAAEF,WAAW,KAAKP,KAAhB,IAAyBD,KAAK,KAAKlD,CAApC,IAA2CkD,KAAK,KAAKuB,WAAV,IAAyBb,WAAW,KAAKT,KAArF,KACAC,SAAS,KAAK;AAAA;AAAA,0DAAkB1B,KAFlC,EAGE;AACA;AACA,qBAAKF,KAAL,GAAa;AAAA;AAAA,4DAAkBkD,UAA/B;AACA,uBAAO,IAAP;AACD,eApB4C,CAsB7C;;;AACA,mBAAK,IAAIX,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,MAAM,CAACO,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACtC,sBAAME,KAAK,GAAGR,MAAM,CAACM,CAAD,CAApB;AACA,sBAAM;AAAE/D,kBAAAA,CAAC,EAAEkE,MAAL;AAAahE,kBAAAA,CAAC,EAAEiE;AAAhB,oBAA2BF,KAAjC;;AACA,oBAAKP,WAAW,KAAKS,MAAhB,IAA0BD,MAAM,KAAKlE,CAAtC,IAA6C4D,WAAW,KAAKO,MAAhB,IAA0BD,MAAM,KAAKO,WAAtF,EAAoG;AAClG;AACA,uBAAKjD,KAAL,GAAa;AAAA;AAAA,8DAAkBkD,UAA/B;AACA,yBAAO,IAAP;AACD;AACF,eA/B4C,CAgC7C;;;AACA,kBACEpB,KAAK,CAACc,IAAN,CAAWd,KAAK,IAAIA,KAAK,CAACtD,CAAN,KAAYA,CAAZ,IAAiBsD,KAAK,CAACpD,CAAN,KAAYwD,WAAjD,MACC,CAACI,cAAD,IAAmBA,cAAc,CAACO,QADnC,CADF,EAGE;AACA,uBAAO,KAAP;AACD,eAtC4C,CAuC7C;;;AACA,kBAAIR,cAAc,IAAIA,cAAc,CAACS,QAAjC,KAA8C,CAACR,cAAD,IAAmBA,cAAc,CAACO,QAAhF,CAAJ,EAA+F,CAC7F;AACD,eAFD,MAEO;AACL,qBAAK7C,KAAL,GAAa;AAAA;AAAA,4DAAkBgD,SAA/B;AACA,uBAAO,IAAP;AACD;AACF,aAjMiC,CAmMlC;;AACD,WApMD,MAoMO,IAAIlD,MAAM,KAAK;AAAA;AAAA,kDAAgBc,MAA/B,EAAuC;AAC5C,kBAAMsB,WAAW,GAAGxD,CAAC,GAAG,CAAxB,CAD4C,CAG5C;;AACA,gBAAIsC,SAAS,KAAK;AAAA;AAAA,kDAAeL,GAAjC,EAAsC;AAAA;;AACpC,kBAAIuB,WAAW,GAAGT,MAAM,GAAG,CAA3B,EAA8B;AAC5B,qBAAKzB,KAAL,GAAa;AAAA;AAAA,4DAAkB+C,SAA/B;AACA,uBAAO,IAAP;AACD;;AAED,oBAAMX,WAAW,GAAG1D,CAApB;AACA,oBAAM2D,cAAc,mBAAGhB,QAAQ,CAAC7C,CAAD,CAAX,iDAAG,aAAc0D,WAAd,CAAvB;AACA,oBAAMI,cAAc,mBAAGjB,QAAQ,CAAC7C,CAAD,CAAX,iDAAG,aAAc4D,WAAd,CAAvB,CARoC,CAUpC;;AACA,kBACE,CAAEF,WAAW,KAAKP,KAAhB,IAAyBD,KAAK,KAAKlD,CAApC,IAA2CkD,KAAK,KAAKlD,CAAV,IAAe4D,WAAW,KAAKT,KAA3E,KACAC,SAAS,KAAK;AAAA;AAAA,0DAAkB1B,KAFlC,EAGE;AACA;AACA,qBAAKF,KAAL,GAAa;AAAA;AAAA,4DAAkB+C,SAA/B;AACA,uBAAO,IAAP;AACD,eAlBmC,CAoBpC;;;AACA,mBAAK,IAAIR,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,MAAM,CAACO,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACtC,sBAAME,KAAK,GAAGR,MAAM,CAACM,CAAD,CAApB;AACA,sBAAM;AAAE/D,kBAAAA,CAAC,EAAEkE,MAAL;AAAahE,kBAAAA,CAAC,EAAEiE;AAAhB,oBAA2BF,KAAjC;;AACA,oBAAIP,WAAW,KAAKS,MAAhB,IAA0BD,MAAM,KAAKlE,CAAzC,EAA4C;AAC1C;AACA,uBAAKwB,KAAL,GAAa;AAAA;AAAA,8DAAkB+C,SAA/B;AACA,yBAAO,IAAP;AACD;AACF,eA7BmC,CA8BpC;;;AACA,kBACEjB,KAAK,CAACc,IAAN,CAAWd,KAAK,IAAIA,KAAK,CAACtD,CAAN,KAAYA,CAAZ,IAAiBsD,KAAK,CAACpD,CAAN,KAAYwD,WAAjD,MACC,CAACI,cAAD,IAAmBA,cAAc,CAACO,QADnC,CADF,EAGE;AACA,uBAAO,KAAP;AACD,eApCmC,CAqCpC;;;AACA,kBAAIR,cAAc,IAAIA,cAAc,CAACS,QAAjC,KAA8C,CAACR,cAAD,IAAmBA,cAAc,CAACO,QAAhF,CAAJ,EAA+F,CAC7F;AACD,eAFD,MAEO;AACL,qBAAK7C,KAAL,GAAa;AAAA;AAAA,4DAAkB+C,SAA/B;AACA,uBAAO,IAAP;AACD,eA3CmC,CA6CpC;;AACD,aA9CD,MA8CO,IAAI/B,SAAS,KAAK;AAAA;AAAA,kDAAeJ,MAAjC,EAAyC;AAAA;;AAC9C,kBAAIsB,WAAW,GAAGT,MAAM,GAAG,CAA3B,EAA8B;AAC5B,qBAAKzB,KAAL,GAAa;AAAA;AAAA,4DAAkBmC,UAA/B;AACA,uBAAO,IAAP;AACD;;AAED,oBAAMC,WAAW,GAAG1D,CAAC,GAAG,CAAxB;AACA,oBAAM2D,cAAc,mBAAGhB,QAAQ,CAAC7C,CAAD,CAAX,iDAAG,aAAc0D,WAAd,CAAvB;AACA,oBAAMI,cAAc,oBAAGjB,QAAQ,CAAC7C,CAAD,CAAX,kDAAG,cAAc4D,WAAd,CAAvB,CAR8C,CAS9C;;AACA,kBACE,CAAEF,WAAW,KAAKP,KAAhB,IAAyBD,KAAK,KAAKlD,CAApC,IAA2CkD,KAAK,KAAKlD,CAAV,IAAe4D,WAAW,KAAKT,KAA3E,KACAC,SAAS,KAAK;AAAA;AAAA,0DAAkB1B,KAFlC,EAGE;AACA;AACA,qBAAKF,KAAL,GAAa;AAAA;AAAA,4DAAkBmC,UAA/B;AACA,uBAAO,IAAP;AACD,eAjB6C,CAmB9C;;;AACA,mBAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,MAAM,CAACO,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACtC,sBAAME,KAAK,GAAGR,MAAM,CAACM,CAAD,CAApB;AACA,sBAAM;AAAE/D,kBAAAA,CAAC,EAAEkE,MAAL;AAAahE,kBAAAA,CAAC,EAAEiE;AAAhB,oBAA2BF,KAAjC;;AACA,oBAAKP,WAAW,KAAKS,MAAhB,IAA0BD,MAAM,KAAKlE,CAAtC,IAA6CkE,MAAM,KAAKlE,CAAX,IAAgB4D,WAAW,KAAKO,MAAjF,EAA0F;AACxF;AACA,uBAAK3C,KAAL,GAAa;AAAA;AAAA,8DAAkBmC,UAA/B;AACA,yBAAO,IAAP;AACD;AACF,eA5B6C,CA6B9C;;;AACA,kBACEL,KAAK,CAACc,IAAN,CAAWd,KAAK,IAAIA,KAAK,CAACtD,CAAN,KAAYA,CAAZ,IAAiBsD,KAAK,CAACpD,CAAN,KAAYwD,WAAjD,MACC,CAACI,cAAD,IAAmBA,cAAc,CAACO,QADnC,CADF,EAGE;AACA,uBAAO,KAAP;AACD,eAnC6C,CAoC9C;;;AACA,kBAAIR,cAAc,IAAIA,cAAc,CAACS,QAAjC,KAA8C,CAACR,cAAD,IAAmBA,cAAc,CAACO,QAAhF,CAAJ,EAA+F,CAC7F;AACD,eAFD,MAEO;AACL,qBAAK7C,KAAL,GAAa;AAAA;AAAA,4DAAkBmC,UAA/B;AACA,uBAAO,IAAP;AACD,eA1C6C,CA4C9C;;AACD,aA7CM,MA6CA,IAAInB,SAAS,KAAK;AAAA;AAAA,kDAAeH,IAAjC,EAAuC;AAAA;;AAC5C,kBAAIqB,WAAW,GAAGT,MAAM,GAAG,CAA3B,EAA8B;AAC5B,qBAAKzB,KAAL,GAAa;AAAA;AAAA,4DAAkBgD,SAA/B;AACA,uBAAO,IAAP;AACD;;AAED,oBAAMC,WAAW,GAAGzE,CAAC,GAAG,CAAxB;AACA,oBAAM4D,WAAW,GAAG1D,CAAC,GAAG,CAAxB;AACA,oBAAM2D,cAAc,oBAAGhB,QAAQ,CAAC7C,CAAD,CAAX,kDAAG,cAAc0D,WAAd,CAAvB;AACA,oBAAMI,cAAc,6BAAGjB,QAAQ,CAAC4B,WAAD,CAAX,2DAAG,uBAAwBb,WAAxB,CAAvB,CAT4C,CAU5C;;AACA,kBACE,CAAEF,WAAW,KAAKP,KAAhB,IAAyBD,KAAK,KAAKlD,CAApC,IAA2CkD,KAAK,KAAKuB,WAAV,IAAyBb,WAAW,KAAKT,KAArF,KACAC,SAAS,KAAK;AAAA;AAAA,0DAAkB1B,KAFlC,EAGE;AACA;AACA,qBAAKF,KAAL,GAAa;AAAA;AAAA,4DAAkBgD,SAA/B;AACA,uBAAO,IAAP;AACD,eAlB2C,CAoB5C;;;AACA,mBAAK,IAAIT,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,MAAM,CAACO,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACtC,sBAAME,KAAK,GAAGR,MAAM,CAACM,CAAD,CAApB;AACA,sBAAM;AAAE/D,kBAAAA,CAAC,EAAEkE,MAAL;AAAahE,kBAAAA,CAAC,EAAEiE;AAAhB,oBAA2BF,KAAjC;;AACA,oBAAKP,WAAW,KAAKS,MAAhB,IAA0BD,MAAM,KAAKlE,CAAtC,IAA6CkE,MAAM,KAAKO,WAAX,IAA0BN,MAAM,KAAKP,WAAtF,EAAoG;AAClG;AACA,uBAAKpC,KAAL,GAAa;AAAA;AAAA,8DAAkBgD,SAA/B;AACA,yBAAO,IAAP;AACD;AACF,eA7B2C,CA8B5C;;;AACA,kBAAIX,cAAc,IAAIA,cAAc,CAACS,QAAjC,KAA8C,CAACR,cAAD,IAAmBA,cAAc,CAACO,QAAhF,CAAJ,EAA+F,CAC7F;AACD,eAFD,MAEO;AACL,qBAAK7C,KAAL,GAAa;AAAA;AAAA,4DAAkBgD,SAA/B;AACA,uBAAO,IAAP;AACD,eApC2C,CAqC5C;;;AACA,kBACElB,KAAK,CAACc,IAAN,CAAWd,KAAK,IAAIA,KAAK,CAACtD,CAAN,KAAYA,CAAZ,IAAiBsD,KAAK,CAACpD,CAAN,KAAYwD,WAAjD,MACC,CAACI,cAAD,IAAmBA,cAAc,CAACO,QADnC,CADF,EAGE;AACA,uBAAO,KAAP;AACD,eA3C2C,CA4C5C;;AACD,aA7CM,MA6CA,IAAI7B,SAAS,KAAK;AAAA;AAAA,kDAAeF,KAAjC,EAAwC;AAAA;;AAC7C,kBAAIoB,WAAW,GAAGT,MAAM,GAAG,CAA3B,EAA8B;AAC5B,qBAAKzB,KAAL,GAAa;AAAA;AAAA,4DAAkBkD,UAA/B;AAEA,uBAAO,IAAP;AACD;;AAED,oBAAMD,WAAW,GAAGzE,CAAC,GAAG,CAAxB;AACA,oBAAM4D,WAAW,GAAG1D,CAAC,GAAG,CAAxB;AACA,oBAAM2D,cAAc,oBAAGhB,QAAQ,CAAC7C,CAAD,CAAX,kDAAG,cAAc0D,WAAd,CAAvB;AACA,oBAAMI,cAAc,6BAAGjB,QAAQ,CAAC4B,WAAD,CAAX,2DAAG,uBAAwBb,WAAxB,CAAvB,CAV6C,CAW7C;;AACA,kBACE,CAAEF,WAAW,KAAKP,KAAhB,IAAyBD,KAAK,KAAKlD,CAApC,IAA2CkD,KAAK,KAAKuB,WAAV,IAAyBb,WAAW,KAAKT,KAArF,KACAC,SAAS,KAAK;AAAA;AAAA,0DAAkB1B,KAFlC,EAGE;AACA;AACA,qBAAKF,KAAL,GAAa;AAAA;AAAA,4DAAkBgD,SAA/B;AACA,uBAAO,IAAP;AACD,eAnB4C,CAqB7C;;;AACA,mBAAK,IAAIT,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,MAAM,CAACO,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACtC,sBAAME,KAAK,GAAGR,MAAM,CAACM,CAAD,CAApB;AACA,sBAAM;AAAE/D,kBAAAA,CAAC,EAAEkE,MAAL;AAAahE,kBAAAA,CAAC,EAAEiE;AAAhB,oBAA2BF,KAAjC;;AACA,oBAAKP,WAAW,KAAKS,MAAhB,IAA0BD,MAAM,KAAKlE,CAAtC,IAA6CkE,MAAM,KAAKO,WAAX,IAA0BN,MAAM,KAAKP,WAAtF,EAAoG;AAClG;AACA,uBAAKpC,KAAL,GAAa;AAAA;AAAA,8DAAkBgD,SAA/B;AACA,yBAAO,IAAP;AACD;AACF,eA9B4C,CA+B7C;;;AACA,kBACElB,KAAK,CAACc,IAAN,CAAWd,KAAK,IAAIA,KAAK,CAACtD,CAAN,KAAYA,CAAZ,IAAiBsD,KAAK,CAACpD,CAAN,KAAYwD,WAAjD,MACC,CAACI,cAAD,IAAmBA,cAAc,CAACO,QADnC,CADF,EAGE;AACA,uBAAO,KAAP;AACD,eArC4C,CAsC7C;;;AACA,kBAAIR,cAAc,IAAIA,cAAc,CAACS,QAAjC,KAA8C,CAACR,cAAD,IAAmBA,cAAc,CAACO,QAAhF,CAAJ,EAA+F,CAC7F;AACD,eAFD,MAEO;AACL,qBAAK7C,KAAL,GAAa;AAAA;AAAA,4DAAkBkD,UAA/B;AACA,uBAAO,IAAP;AACD;AACF,aAzL2C,CA2L5C;;AACD,WA5LM,MA4LA,IAAIpD,MAAM,KAAK;AAAA;AAAA,kDAAgBe,IAA/B,EAAqC;AAC1C,kBAAMsC,WAAW,GAAG3E,CAAC,GAAG,CAAxB,CAD0C,CAG1C;;AACA,gBAAIwC,SAAS,KAAK;AAAA;AAAA,kDAAeL,GAAjC,EAAsC;AAAA;;AACpC;AACA,kBAAIwC,WAAW,GAAG,CAAlB,EAAqB;AACnB,qBAAKnD,KAAL,GAAa;AAAA;AAAA,4DAAkBgD,SAA/B;AAEA,uBAAO,IAAP;AACD;;AAED,oBAAMC,WAAW,GAAGzE,CAAC,GAAG,CAAxB;AACA,oBAAM4D,WAAW,GAAG1D,CAAC,GAAG,CAAxB;AACA,oBAAM2D,cAAc,4BAAGhB,QAAQ,CAAC8B,WAAD,CAAX,0DAAG,sBAAwBzE,CAAxB,CAAvB;AACA,oBAAM4D,cAAc,6BAAGjB,QAAQ,CAAC4B,WAAD,CAAX,2DAAG,uBAAwBb,WAAxB,CAAvB,CAXoC,CAapC;;AACA,kBACE,CAAE1D,CAAC,KAAKiD,KAAN,IAAeD,KAAK,KAAKyB,WAA1B,IAA2CzB,KAAK,KAAKuB,WAAV,IAAyBb,WAAW,KAAKT,KAArF,KACAC,SAAS,KAAK;AAAA;AAAA,0DAAkB1B,KAFlC,EAGE;AACA;AACA,qBAAKF,KAAL,GAAa;AAAA;AAAA,4DAAkBgD,SAA/B;AACA,uBAAO,IAAP;AACD,eArBmC,CAuBpC;;;AACA,mBAAK,IAAIT,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,MAAM,CAACO,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACtC,sBAAME,KAAK,GAAGR,MAAM,CAACM,CAAD,CAApB;AACA,sBAAM;AAAE/D,kBAAAA,CAAC,EAAEkE,MAAL;AAAahE,kBAAAA,CAAC,EAAEiE;AAAhB,oBAA2BF,KAAjC;;AACA,oBAAK/D,CAAC,KAAKiE,MAAN,IAAgBD,MAAM,KAAKS,WAA5B,IAA6CT,MAAM,KAAKO,WAAX,IAA0BN,MAAM,KAAKP,WAAtF,EAAoG;AAClG;AACA,uBAAKpC,KAAL,GAAa;AAAA;AAAA,8DAAkBgD,SAA/B;AACA,yBAAO,IAAP;AACD;AACF,eAhCmC,CAiCpC;;;AACA,kBACElB,KAAK,CAACc,IAAN,CAAWd,KAAK,IAAIA,KAAK,CAACtD,CAAN,KAAY2E,WAAZ,IAA2BrB,KAAK,CAACpD,CAAN,KAAYA,CAA3D,MACC,CAAC4D,cAAD,IAAmBA,cAAc,CAACO,QADnC,CADF,EAGE;AACA,uBAAO,KAAP;AACD,eAvCmC,CAwCpC;;;AACA,kBAAIR,cAAc,IAAIA,cAAc,CAACS,QAAjC,KAA8C,CAACR,cAAD,IAAmBA,cAAc,CAACO,QAAhF,CAAJ,EAA+F,CAC7F;AACD,eAFD,MAEO;AACL,qBAAK7C,KAAL,GAAa;AAAA;AAAA,4DAAkBgD,SAA/B;AACA,uBAAO,IAAP;AACD,eA9CmC,CAgDpC;;AACD,aAjDD,MAiDO,IAAIhC,SAAS,KAAK;AAAA;AAAA,kDAAeJ,MAAjC,EAAyC;AAAA;;AAC9C;AACA,kBAAIuC,WAAW,GAAG,CAAlB,EAAqB;AACnB,qBAAKnD,KAAL,GAAa;AAAA;AAAA,4DAAkBkD,UAA/B;AAEA,uBAAO,IAAP;AACD;;AAED,oBAAMD,WAAW,GAAGzE,CAAC,GAAG,CAAxB;AACA,oBAAM4D,WAAW,GAAG1D,CAAC,GAAG,CAAxB;AACA,oBAAM2D,cAAc,6BAAGhB,QAAQ,CAAC8B,WAAD,CAAX,2DAAG,uBAAwBzE,CAAxB,CAAvB;AACA,oBAAM4D,cAAc,6BAAGjB,QAAQ,CAAC4B,WAAD,CAAX,2DAAG,uBAAwBb,WAAxB,CAAvB,CAX8C,CAa9C;;AACA,kBACE,CAAE1D,CAAC,KAAKiD,KAAN,IAAeD,KAAK,KAAKyB,WAA1B,IAA2CzB,KAAK,KAAKuB,WAAV,IAAyBb,WAAW,KAAKT,KAArF,KACAC,SAAS,KAAK;AAAA;AAAA,0DAAkB1B,KAFlC,EAGE;AACA;AACA,qBAAKF,KAAL,GAAa;AAAA;AAAA,4DAAkBgD,SAA/B;AACA,uBAAO,IAAP;AACD,eArB6C,CAuB9C;;;AACA,mBAAK,IAAIT,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,MAAM,CAACO,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACtC,sBAAME,KAAK,GAAGR,MAAM,CAACM,CAAD,CAApB;AACA,sBAAM;AAAE/D,kBAAAA,CAAC,EAAEkE,MAAL;AAAahE,kBAAAA,CAAC,EAAEiE;AAAhB,oBAA2BF,KAAjC;;AACA,oBAAK/D,CAAC,KAAKiE,MAAN,IAAgBD,MAAM,KAAKS,WAA5B,IAA6CT,MAAM,KAAKO,WAAX,IAA0BN,MAAM,KAAKP,WAAtF,EAAoG;AAClG;AACA,uBAAKpC,KAAL,GAAa;AAAA;AAAA,8DAAkBgD,SAA/B;AACA,yBAAO,IAAP;AACD;AACF,eAhC6C,CAiC9C;;;AACA,kBACElB,KAAK,CAACc,IAAN,CAAWd,KAAK,IAAIA,KAAK,CAACtD,CAAN,KAAY2E,WAAZ,IAA2BrB,KAAK,CAACpD,CAAN,KAAYA,CAA3D,MACC,CAAC4D,cAAD,IAAmBA,cAAc,CAACO,QADnC,CADF,EAGE;AACA,uBAAO,KAAP;AACD,eAvC6C,CAwC9C;;;AACA,kBAAIR,cAAc,IAAIA,cAAc,CAACS,QAAjC,KAA8C,CAACR,cAAD,IAAmBA,cAAc,CAACO,QAAhF,CAAJ,EAA+F,CAC7F;AACD,eAFD,MAEO;AACL,qBAAK7C,KAAL,GAAa;AAAA;AAAA,4DAAkBkD,UAA/B;AACA,uBAAO,IAAP;AACD,eA9C6C,CAgD9C;;AACD,aAjDM,MAiDA,IAAIlC,SAAS,KAAK;AAAA;AAAA,kDAAeH,IAAjC,EAAuC;AAAA;;AAC5C;AACA,kBAAIsC,WAAW,GAAG,CAAlB,EAAqB;AACnB,qBAAKnD,KAAL,GAAa;AAAA;AAAA,4DAAkBmC,UAA/B;AAEA,uBAAO,IAAP;AACD;;AAED,oBAAMc,WAAW,GAAGzE,CAAC,GAAG,CAAxB;AACA,oBAAM6D,cAAc,6BAAGhB,QAAQ,CAAC8B,WAAD,CAAX,2DAAG,uBAAwBzE,CAAxB,CAAvB;AACA,oBAAM4D,cAAc,6BAAGjB,QAAQ,CAAC4B,WAAD,CAAX,2DAAG,uBAAwBvE,CAAxB,CAAvB,CAV4C,CAW5C;;AACA,kBACE,CAAEA,CAAC,KAAKiD,KAAN,IAAeD,KAAK,KAAKyB,WAA1B,IAA2CzB,KAAK,KAAKuB,WAAV,IAAyBvE,CAAC,KAAKiD,KAA3E,KACAC,SAAS,KAAK;AAAA;AAAA,0DAAkB1B,KAFlC,EAGE;AACA;AACA,qBAAKF,KAAL,GAAa;AAAA;AAAA,4DAAkBgD,SAA/B;AACA,uBAAO,IAAP;AACD,eAnB2C,CAqB5C;;;AACA,mBAAK,IAAIT,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,MAAM,CAACO,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACtC,sBAAME,KAAK,GAAGR,MAAM,CAACM,CAAD,CAApB;AACA,sBAAM;AAAE/D,kBAAAA,CAAC,EAAEkE,MAAL;AAAahE,kBAAAA,CAAC,EAAEiE;AAAhB,oBAA2BF,KAAjC;;AACA,oBAAK/D,CAAC,KAAKiE,MAAN,IAAgBD,MAAM,KAAKS,WAA5B,IAA6CT,MAAM,KAAKO,WAAX,IAA0BN,MAAM,KAAKjE,CAAtF,EAA0F;AACxF;AACA,uBAAKsB,KAAL,GAAa;AAAA;AAAA,8DAAkBgD,SAA/B;AACA,yBAAO,IAAP;AACD;AACF,eA9B2C,CA+B5C;;;AACA,kBACElB,KAAK,CAACc,IAAN,CAAWd,KAAK,IAAIA,KAAK,CAACtD,CAAN,KAAY2E,WAAZ,IAA2BrB,KAAK,CAACpD,CAAN,KAAYA,CAA3D,MACC,CAAC4D,cAAD,IAAmBA,cAAc,CAACO,QADnC,CADF,EAGE;AACA,uBAAO,KAAP;AACD,eArC2C,CAsC5C;;;AACA,kBAAIR,cAAc,IAAIA,cAAc,CAACS,QAAjC,KAA8C,CAACR,cAAD,IAAmBA,cAAc,CAACO,QAAhF,CAAJ,EAA+F,CAC7F;AACD,eAFD,MAEO;AACL,qBAAK7C,KAAL,GAAa;AAAA;AAAA,4DAAkBmC,UAA/B;AACA,uBAAO,IAAP;AACD,eA5C2C,CA8C5C;;AACD,aA/CM,MA+CA,IAAInB,SAAS,KAAK;AAAA;AAAA,kDAAeF,KAAjC,EAAwC;AAAA;;AAC7C;AACA,kBAAIqC,WAAW,GAAG,CAAlB,EAAqB;AACnB,qBAAKnD,KAAL,GAAa;AAAA;AAAA,4DAAkB+C,SAA/B;AAEA,uBAAO,IAAP;AACD;;AAED,oBAAME,WAAW,GAAGzE,CAApB;AACA,oBAAM6D,cAAc,6BAAGhB,QAAQ,CAAC8B,WAAD,CAAX,2DAAG,uBAAwBzE,CAAxB,CAAvB;AACA,oBAAM4D,cAAc,6BAAGjB,QAAQ,CAAC4B,WAAD,CAAX,2DAAG,uBAAwBvE,CAAxB,CAAvB,CAV6C,CAY7C;;AACA,kBACE,CAAEA,CAAC,KAAKiD,KAAN,IAAeD,KAAK,KAAKyB,WAA1B,IAA2CzB,KAAK,KAAKuB,WAAV,IAAyBvE,CAAC,KAAKiD,KAA3E,KACAC,SAAS,KAAK;AAAA;AAAA,0DAAkB1B,KAFlC,EAGE;AACA;AACA,qBAAKF,KAAL,GAAa;AAAA;AAAA,4DAAkBgD,SAA/B;AACA,uBAAO,IAAP;AACD,eApB4C,CAsB7C;;;AACA,mBAAK,IAAIT,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,MAAM,CAACO,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACtC,sBAAME,KAAK,GAAGR,MAAM,CAACM,CAAD,CAApB;AACA,sBAAM;AAAE/D,kBAAAA,CAAC,EAAEkE,MAAL;AAAahE,kBAAAA,CAAC,EAAEiE;AAAhB,oBAA2BF,KAAjC;;AACA,oBAAK/D,CAAC,KAAKiE,MAAN,IAAgBD,MAAM,KAAKS,WAA5B,IAA6CT,MAAM,KAAKO,WAAX,IAA0BN,MAAM,KAAKjE,CAAtF,EAA0F;AACxF;AACA,uBAAKsB,KAAL,GAAa;AAAA;AAAA,8DAAkBgD,SAA/B;AACA,yBAAO,IAAP;AACD;AACF,eA/B4C,CAgC7C;;;AACA,kBACElB,KAAK,CAACc,IAAN,CAAWd,KAAK,IAAIA,KAAK,CAACtD,CAAN,KAAY2E,WAAZ,IAA2BrB,KAAK,CAACpD,CAAN,KAAYA,CAA3D,MACC,CAAC4D,cAAD,IAAmBA,cAAc,CAACO,QADnC,CADF,EAGE;AACA,uBAAO,KAAP;AACD,eAtC4C,CAuC7C;;;AACA,kBAAIR,cAAc,IAAIA,cAAc,CAACS,QAAjC,KAA8C,CAACR,cAAD,IAAmBA,cAAc,CAACO,QAAhF,CAAJ,EAA+F,CAC7F;AACD,eAFD,MAEO;AACL,qBAAK7C,KAAL,GAAa;AAAA;AAAA,4DAAkB+C,SAA/B;AACA,uBAAO,IAAP;AACD;AACF,aAnMyC,CAqM1C;;AACD,WAtMM,MAsMA,IAAIjD,MAAM,KAAK;AAAA;AAAA,kDAAgBgB,KAA/B,EAAsC;AAC3C,kBAAMqC,WAAW,GAAG3E,CAAC,GAAG,CAAxB,CAD2C,CAG3C;;AACA,gBAAIwC,SAAS,KAAK;AAAA;AAAA,kDAAeL,GAAjC,EAAsC;AAAA;;AACpC,kBAAIwC,WAAW,GAAG5B,GAAG,GAAG,CAAxB,EAA2B;AACzB,qBAAKvB,KAAL,GAAa;AAAA;AAAA,4DAAkBkD,UAA/B;AAEA,uBAAO,IAAP;AACD;;AAED,oBAAMD,WAAW,GAAGzE,CAAC,GAAG,CAAxB;AACA,oBAAM4D,WAAW,GAAG1D,CAAC,GAAG,CAAxB;AACA,oBAAM2D,cAAc,6BAAGhB,QAAQ,CAAC8B,WAAD,CAAX,2DAAG,uBAAwBzE,CAAxB,CAAvB;AACA,oBAAM4D,cAAc,6BAAGjB,QAAQ,CAAC4B,WAAD,CAAX,2DAAG,uBAAwBb,WAAxB,CAAvB,CAVoC,CAYpC;;AACA,kBACE,CAAE1D,CAAC,KAAKiD,KAAN,IAAeD,KAAK,KAAKyB,WAA1B,IAA2CzB,KAAK,KAAKuB,WAAV,IAAyBb,WAAW,KAAKT,KAArF,KACAC,SAAS,KAAK;AAAA;AAAA,0DAAkB1B,KAFlC,EAGE;AACA;AACA,qBAAKF,KAAL,GAAa;AAAA;AAAA,4DAAkBkD,UAA/B;AACA,uBAAO,IAAP;AACD,eApBmC,CAsBpC;;;AACA,mBAAK,IAAIX,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,MAAM,CAACO,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACtC,sBAAME,KAAK,GAAGR,MAAM,CAACM,CAAD,CAApB;AACA,sBAAM;AAAE/D,kBAAAA,CAAC,EAAEkE,MAAL;AAAahE,kBAAAA,CAAC,EAAEiE;AAAhB,oBAA2BF,KAAjC;;AACA,oBAAK/D,CAAC,KAAKiE,MAAN,IAAgBD,MAAM,KAAKS,WAA5B,IAA6CT,MAAM,KAAKO,WAAX,IAA0BN,MAAM,KAAKP,WAAtF,EAAoG;AAClG;AACA,uBAAKpC,KAAL,GAAa;AAAA;AAAA,8DAAkBkD,UAA/B;AACA,yBAAO,IAAP;AACD;AACF,eA/BmC,CAgCpC;;;AACA,kBACEpB,KAAK,CAACc,IAAN,CAAWd,KAAK,IAAIA,KAAK,CAACtD,CAAN,KAAY2E,WAAZ,IAA2BrB,KAAK,CAACpD,CAAN,KAAYA,CAA3D,MACC,CAAC4D,cAAD,IAAmBA,cAAc,CAACO,QADnC,CADF,EAGE;AACA,uBAAO,KAAP;AACD,eAtCmC,CAuCpC;;;AACA,kBAAIR,cAAc,IAAIA,cAAc,CAACS,QAAjC,KAA8C,CAACR,cAAD,IAAmBA,cAAc,CAACO,QAAhF,CAAJ,EAA+F,CAC7F;AACD,eAFD,MAEO;AACL,qBAAK7C,KAAL,GAAa;AAAA;AAAA,4DAAkBkD,UAA/B;AACA,uBAAO,IAAP;AACD,eA7CmC,CA+CpC;;AACD,aAhDD,MAgDO,IAAIlC,SAAS,KAAK;AAAA;AAAA,kDAAeJ,MAAjC,EAAyC;AAAA;;AAC9C,kBAAIuC,WAAW,GAAG5B,GAAG,GAAG,CAAxB,EAA2B;AACzB,qBAAKvB,KAAL,GAAa;AAAA;AAAA,4DAAkBgD,SAA/B;AAEA,uBAAO,IAAP;AACD;;AAED,oBAAMC,WAAW,GAAGzE,CAAC,GAAG,CAAxB;AACA,oBAAM4D,WAAW,GAAG1D,CAAC,GAAG,CAAxB;AACA,oBAAM2D,cAAc,6BAAGhB,QAAQ,CAAC8B,WAAD,CAAX,2DAAG,uBAAwBzE,CAAxB,CAAvB;AACA,oBAAM4D,cAAc,8BAAGjB,QAAQ,CAAC4B,WAAD,CAAX,4DAAG,wBAAwBb,WAAxB,CAAvB,CAV8C,CAW9C;;AACA,kBACE,CAAE1D,CAAC,KAAKiD,KAAN,IAAeD,KAAK,KAAKyB,WAA1B,IAA2CzB,KAAK,KAAKuB,WAAV,IAAyBb,WAAW,KAAKT,KAArF,KACAC,SAAS,KAAK;AAAA;AAAA,0DAAkB1B,KAFlC,EAGE;AACA;AACA,qBAAKF,KAAL,GAAa;AAAA;AAAA,4DAAkBkD,UAA/B;AACA,uBAAO,IAAP;AACD,eAnB6C,CAqB9C;;;AACA,mBAAK,IAAIX,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,MAAM,CAACO,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACtC,sBAAME,KAAK,GAAGR,MAAM,CAACM,CAAD,CAApB;AACA,sBAAM;AAAE/D,kBAAAA,CAAC,EAAEkE,MAAL;AAAahE,kBAAAA,CAAC,EAAEiE;AAAhB,oBAA2BF,KAAjC;;AACA,oBAAK/D,CAAC,KAAKiE,MAAN,IAAgBD,MAAM,KAAKS,WAA5B,IAA6CT,MAAM,KAAKO,WAAX,IAA0BN,MAAM,KAAKP,WAAtF,EAAoG;AAClG;AACA,uBAAKpC,KAAL,GAAa;AAAA;AAAA,8DAAkBkD,UAA/B;AACA,yBAAO,IAAP;AACD;AACF,eA9B6C,CA+B9C;;;AACA,kBACEpB,KAAK,CAACc,IAAN,CAAWd,KAAK,IAAIA,KAAK,CAACtD,CAAN,KAAY2E,WAAZ,IAA2BrB,KAAK,CAACpD,CAAN,KAAYA,CAA3D,MACC,CAAC4D,cAAD,IAAmBA,cAAc,CAACO,QADnC,CADF,EAGE;AACA,uBAAO,KAAP;AACD,eArC6C,CAsC9C;;;AACA,kBAAIR,cAAc,IAAIA,cAAc,CAACS,QAAjC,KAA8C,CAACR,cAAD,IAAmBA,cAAc,CAACO,QAAhF,CAAJ,EAA+F,CAC7F;AACD,eAFD,MAEO;AACL,qBAAK7C,KAAL,GAAa;AAAA;AAAA,4DAAkB+C,SAA/B;AACA,uBAAO,IAAP;AACD,eA5C6C,CA8C9C;;AACD,aA/CM,MA+CA,IAAI/B,SAAS,KAAK;AAAA;AAAA,kDAAeH,IAAjC,EAAuC;AAAA;;AAC5C,kBAAIsC,WAAW,GAAG5B,GAAG,GAAG,CAAxB,EAA2B;AACzB,qBAAKvB,KAAL,GAAa;AAAA;AAAA,4DAAkB+C,SAA/B;AAEA,uBAAO,IAAP;AACD;;AAED,oBAAME,WAAW,GAAGzE,CAApB;AACA,oBAAM6D,cAAc,6BAAGhB,QAAQ,CAAC8B,WAAD,CAAX,2DAAG,uBAAwBzE,CAAxB,CAAvB;AACA,oBAAM4D,cAAc,8BAAGjB,QAAQ,CAAC4B,WAAD,CAAX,4DAAG,wBAAwBvE,CAAxB,CAAvB,CAT4C,CAU5C;;AACA,kBACE,CAAEA,CAAC,KAAKiD,KAAN,IAAeD,KAAK,KAAKyB,WAA1B,IAA2CzB,KAAK,KAAKuB,WAAV,IAAyBvE,CAAC,KAAKiD,KAA3E,KACAC,SAAS,KAAK;AAAA;AAAA,0DAAkB1B,KAFlC,EAGE;AACA;AACA,qBAAKF,KAAL,GAAa;AAAA;AAAA,4DAAkBgD,SAA/B;AACA,uBAAO,IAAP;AACD,eAlB2C,CAoB5C;;;AACA,mBAAK,IAAIT,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,MAAM,CAACO,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACtC,sBAAME,KAAK,GAAGR,MAAM,CAACM,CAAD,CAApB;AACA,sBAAM;AAAE/D,kBAAAA,CAAC,EAAEkE,MAAL;AAAahE,kBAAAA,CAAC,EAAEiE;AAAhB,oBAA2BF,KAAjC;;AACA,oBAAK/D,CAAC,KAAKiE,MAAN,IAAgBD,MAAM,KAAKS,WAA5B,IAA6CT,MAAM,KAAKO,WAAX,IAA0BN,MAAM,KAAKjE,CAAtF,EAA0F;AACxF;AACA,uBAAKsB,KAAL,GAAa;AAAA;AAAA,8DAAkBgD,SAA/B;AACA,yBAAO,IAAP;AACD;AACF,eA7B2C,CA8B5C;;;AACA,kBACElB,KAAK,CAACc,IAAN,CAAWd,KAAK,IAAIA,KAAK,CAACtD,CAAN,KAAY2E,WAAZ,IAA2BrB,KAAK,CAACpD,CAAN,KAAYA,CAA3D,MACC,CAAC4D,cAAD,IAAmBA,cAAc,CAACO,QADnC,CADF,EAGE;AACA,uBAAO,KAAP;AACD,eApC2C,CAqC5C;;;AACA,kBAAIR,cAAc,IAAIA,cAAc,CAACS,QAAjC,KAA8C,CAACR,cAAD,IAAmBA,cAAc,CAACO,QAAhF,CAAJ,EAA+F,CAC7F;AACD,eAFD,MAEO;AACL,qBAAK7C,KAAL,GAAa;AAAA;AAAA,4DAAkB+C,SAA/B;AACA,uBAAO,IAAP;AACD,eA3C2C,CA6C5C;;AACD,aA9CM,MA8CA,IAAI/B,SAAS,KAAK;AAAA;AAAA,kDAAeF,KAAjC,EAAwC;AAAA;;AAC7C,kBAAIqC,WAAW,GAAG5B,GAAG,GAAG,CAAxB,EAA2B;AACzB,qBAAKvB,KAAL,GAAa;AAAA;AAAA,4DAAkBmC,UAA/B;AAEA,uBAAO,IAAP;AACD;;AAED,oBAAMc,WAAW,GAAGzE,CAAC,GAAG,CAAxB;AACA,oBAAM6D,cAAc,6BAAGhB,QAAQ,CAAC8B,WAAD,CAAX,2DAAG,uBAAwBzE,CAAxB,CAAvB;AACA,oBAAM4D,cAAc,8BAAGjB,QAAQ,CAAC4B,WAAD,CAAX,4DAAG,wBAAwBvE,CAAxB,CAAvB,CAT6C,CAU7C;;AACA,kBACE,CAAEA,CAAC,KAAKiD,KAAN,IAAeD,KAAK,KAAKyB,WAA1B,IAA2CzB,KAAK,KAAKuB,WAAV,IAAyBvE,CAAC,KAAKiD,KAA3E,KACAC,SAAS,KAAK;AAAA;AAAA,0DAAkB1B,KAFlC,EAGE;AACA;AACA,qBAAKF,KAAL,GAAa;AAAA;AAAA,4DAAkBkD,UAA/B;AACA,uBAAO,IAAP;AACD,eAlB4C,CAoB7C;;;AACA,mBAAK,IAAIX,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,MAAM,CAACO,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACtC,sBAAME,KAAK,GAAGR,MAAM,CAACM,CAAD,CAApB;AACA,sBAAM;AAAE/D,kBAAAA,CAAC,EAAEkE,MAAL;AAAahE,kBAAAA,CAAC,EAAEiE;AAAhB,oBAA2BF,KAAjC;;AACA,oBAAK/D,CAAC,KAAKiE,MAAN,IAAgBD,MAAM,KAAKS,WAA5B,IAA6CT,MAAM,KAAKO,WAAX,IAA0BN,MAAM,KAAKjE,CAAtF,EAA0F;AACxF;AACA,uBAAKsB,KAAL,GAAa;AAAA;AAAA,8DAAkBkD,UAA/B;AACA,yBAAO,IAAP;AACD;AACF,eA7B4C,CA8B7C;;;AACA,kBACEpB,KAAK,CAACc,IAAN,CAAWd,KAAK,IAAIA,KAAK,CAACtD,CAAN,KAAY2E,WAAZ,IAA2BrB,KAAK,CAACpD,CAAN,KAAYA,CAA3D,MACC,CAAC4D,cAAD,IAAmBA,cAAc,CAACO,QADnC,CADF,EAGE;AACA,uBAAO,KAAP;AACD,eApC4C,CAqC7C;;;AACA,kBAAIR,cAAc,IAAIA,cAAc,CAACS,QAAjC,KAA8C,CAACR,cAAD,IAAmBA,cAAc,CAACO,QAAhF,CAAJ,EAA+F,CAC7F;AACD,eAFD,MAEO;AACL,qBAAK7C,KAAL,GAAa;AAAA;AAAA,4DAAkBmC,UAA/B;AACA,uBAAO,IAAP;AACD;AACF,aA7L0C,CA+L3C;;AACD,WAhMM,MAgMA,IAAIrC,MAAM,KAAK;AAAA;AAAA,kDAAgBiB,SAA/B,EAA0C;AAAA;;AAC/C,gBAAIqC,KAAJ;AACA,gBAAIC,KAAJ;;AAEA,gBAAIrC,SAAS,KAAK;AAAA;AAAA,kDAAeL,GAAjC,EAAsC;AACpCyC,cAAAA,KAAK,GAAG5E,CAAC,GAAG,CAAZ;AACA6E,cAAAA,KAAK,GAAG3E,CAAC,GAAG,CAAZ;AACD,aAHD,MAGO,IAAIsC,SAAS,KAAK;AAAA;AAAA,kDAAeJ,MAAjC,EAAyC;AAC9CwC,cAAAA,KAAK,GAAG5E,CAAC,GAAG,CAAZ;AACA6E,cAAAA,KAAK,GAAG3E,CAAC,GAAG,CAAZ;AACD,aAHM,MAGA,IAAIsC,SAAS,KAAK;AAAA;AAAA,kDAAeH,IAAjC,EAAuC;AAC5CuC,cAAAA,KAAK,GAAG5E,CAAC,GAAG,CAAZ;AACA6E,cAAAA,KAAK,GAAG3E,CAAC,GAAG,CAAZ;AACD,aAHM,MAGA,IAAIsC,SAAS,KAAK;AAAA;AAAA,kDAAeF,KAAjC,EAAwC;AAC7CsC,cAAAA,KAAK,GAAG5E,CAAC,GAAG,CAAZ;AACA6E,cAAAA,KAAK,GAAG3E,CAAC,GAAG,CAAZ;AACD;AACD;AACN;AACA;;;AACM,gBACE,CAAC,mBAAC2C,QAAQ,CAAC7C,CAAD,CAAT,kDAAC,cAAc6E,KAAd,CAAD,uBAAyBhC,QAAQ,CAAC7C,CAAD,CAAjC,yEAAyB,cAAc6E,KAAd,CAAzB,wDAAyB,oBAAsBR,QAA/C,CAAD,MACC,qBAACxB,QAAQ,CAAC+B,KAAD,CAAT,oDAAC,gBAAkB1E,CAAlB,CAAD,0BAAyB2C,QAAQ,CAAC+B,KAAD,CAAjC,2EAAyB,iBAAkB1E,CAAlB,CAAzB,uDAAyB,mBAAsBmE,QAA/C,CADD,MAEC,sBAACxB,QAAQ,CAAC+B,KAAD,CAAT,qDAAC,iBAAkBC,KAAlB,CAAD,0BAA6BhC,QAAQ,CAAC+B,KAAD,CAArC,8EAA6B,iBAAkBC,KAAlB,CAA7B,0DAA6B,sBAA0BR,QAAvD,CAFD,CADF,EAIE,CACA;AACD,aAND,MAMO;AACL,mBAAK7C,KAAL,GAAa;AAAA;AAAA,0DAAkBsD,aAA/B;AACA,qBAAO,IAAP;AACD,aA7B8C,CA8B/C;;;AACA,gBACG5B,KAAK,KAAKlD,CAAV,IAAemD,KAAK,KAAK0B,KAA1B,IACC3B,KAAK,KAAK0B,KAAV,IAAmBzB,KAAK,KAAKjD,CAD9B,IAECgD,KAAK,KAAK0B,KAAV,IAAmBC,KAAK,KAAK1B,KAA7B,IAAsCC,SAAS,KAAK;AAAA;AAAA,wDAAkB1B,KAHzE,EAIE;AACA;AACA,mBAAKF,KAAL,GAAa;AAAA;AAAA,0DAAkBsD,aAA/B;AACA,qBAAO,IAAP;AACD,aAvC8C,CAyC/C;;;AACA,iBAAK,IAAIf,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,MAAM,CAACO,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACtC,oBAAME,KAAK,GAAGR,MAAM,CAACM,CAAD,CAApB;AACA,oBAAM;AAAE/D,gBAAAA,CAAC,EAAEkE,MAAL;AAAahE,gBAAAA,CAAC,EAAEiE;AAAhB,kBAA2BF,KAAjC;;AACA,kBAAIjE,CAAC,KAAKkE,MAAN,IAAgBC,MAAM,KAAKU,KAA/B,EAAsC;AACpC;AACA,qBAAKrD,KAAL,GAAa;AAAA;AAAA,4DAAkBsD,aAA/B;AACA,uBAAO,IAAP;AACD,eAJD,MAIO,IAAIF,KAAK,KAAKV,MAAV,IAAoBC,MAAM,KAAKjE,CAAnC,EAAsC;AAC3C;AACA,qBAAKsB,KAAL,GAAa;AAAA;AAAA,4DAAkBsD,aAA/B;AACA,uBAAO,IAAP;AACD,eAJM,MAIA,IAAIF,KAAK,KAAKV,MAAV,IAAoBC,MAAM,KAAKU,KAAnC,EAA0C;AAC/C;AACA,qBAAKrD,KAAL,GAAa;AAAA;AAAA,4DAAkBsD,aAA/B;AACA,uBAAO,IAAP;AACD;AACF;AACF,WA3DM,MA2DA,IAAIxD,MAAM,KAAK;AAAA;AAAA,kDAAgBmB,UAA/B,EAA2C;AAAA;;AAChD,gBAAImC,KAAJ;AACA,gBAAIC,KAAJ;;AAEA,gBAAIrC,SAAS,KAAK;AAAA;AAAA,kDAAeL,GAAjC,EAAsC;AACpCyC,cAAAA,KAAK,GAAG5E,CAAC,GAAG,CAAZ;AACA6E,cAAAA,KAAK,GAAG3E,CAAC,GAAG,CAAZ;AACD,aAHD,MAGO,IAAIsC,SAAS,KAAK;AAAA;AAAA,kDAAeJ,MAAjC,EAAyC;AAC9CwC,cAAAA,KAAK,GAAG5E,CAAC,GAAG,CAAZ;AACA6E,cAAAA,KAAK,GAAG3E,CAAC,GAAG,CAAZ;AACD,aAHM,MAGA,IAAIsC,SAAS,KAAK;AAAA;AAAA,kDAAeH,IAAjC,EAAuC;AAC5CuC,cAAAA,KAAK,GAAG5E,CAAC,GAAG,CAAZ;AACA6E,cAAAA,KAAK,GAAG3E,CAAC,GAAG,CAAZ;AACD,aAHM,MAGA,IAAIsC,SAAS,KAAK;AAAA;AAAA,kDAAeF,KAAjC,EAAwC;AAC7CsC,cAAAA,KAAK,GAAG5E,CAAC,GAAG,CAAZ;AACA6E,cAAAA,KAAK,GAAG3E,CAAC,GAAG,CAAZ;AACD,aAhB+C,CAkBhD;;;AACA,gBACGgD,KAAK,KAAKlD,CAAV,IAAemD,KAAK,KAAK0B,KAA1B,IACC3B,KAAK,KAAK0B,KAAV,IAAmBzB,KAAK,KAAKjD,CAD9B,IAECgD,KAAK,KAAK0B,KAAV,IAAmBC,KAAK,KAAK1B,KAA7B,IAAsCC,SAAS,KAAK;AAAA;AAAA,wDAAkB1B,KAHzE,EAIE;AACA;AACA,mBAAKF,KAAL,GAAa;AAAA;AAAA,0DAAkBuD,cAA/B;AACA,qBAAO,IAAP;AACD,aA3B+C,CA6BhD;;;AACA,iBAAK,IAAIhB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,MAAM,CAACO,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACtC,oBAAME,KAAK,GAAGR,MAAM,CAACM,CAAD,CAApB;AACA,oBAAM;AAAE/D,gBAAAA,CAAC,EAAEkE,MAAL;AAAahE,gBAAAA,CAAC,EAAEiE;AAAhB,kBAA2BF,KAAjC;;AACA,kBAAIjE,CAAC,KAAKkE,MAAN,IAAgBC,MAAM,KAAKU,KAA/B,EAAsC;AACpC;AACA,qBAAKrD,KAAL,GAAa;AAAA;AAAA,4DAAkBuD,cAA/B;AACA,uBAAO,IAAP;AACD,eAJD,MAIO,IAAIH,KAAK,KAAKV,MAAV,IAAoBC,MAAM,KAAKjE,CAAnC,EAAsC;AAC3C;AACA,qBAAKsB,KAAL,GAAa;AAAA;AAAA,4DAAkBuD,cAA/B;AACA,uBAAO,IAAP;AACD,eAJM,MAIA,IAAIH,KAAK,KAAKV,MAAV,IAAoBC,MAAM,KAAKU,KAAnC,EAA0C;AAC/C;AACA,qBAAKrD,KAAL,GAAa;AAAA;AAAA,4DAAkBuD,cAA/B;AACA,uBAAO,IAAP;AACD;AACF;;AAED,gBACE,CAAC,mBAAClC,QAAQ,CAAC7C,CAAD,CAAT,kDAAC,cAAc6E,KAAd,CAAD,uBAAyBhC,QAAQ,CAAC7C,CAAD,CAAjC,yEAAyB,cAAc6E,KAAd,CAAzB,wDAAyB,oBAAsBR,QAA/C,CAAD,MACC,sBAACxB,QAAQ,CAAC+B,KAAD,CAAT,qDAAC,iBAAkB1E,CAAlB,CAAD,0BAAyB2C,QAAQ,CAAC+B,KAAD,CAAjC,2EAAyB,iBAAkB1E,CAAlB,CAAzB,uDAAyB,mBAAsBmE,QAA/C,CADD,MAEC,sBAACxB,QAAQ,CAAC+B,KAAD,CAAT,qDAAC,iBAAkBC,KAAlB,CAAD,0BAA6BhC,QAAQ,CAAC+B,KAAD,CAArC,8EAA6B,iBAAkBC,KAAlB,CAA7B,0DAA6B,sBAA0BR,QAAvD,CAFD,CADF,EAIE,CACA;AACD,aAND,MAMO;AACL,mBAAK7C,KAAL,GAAa;AAAA;AAAA,0DAAkBuD,cAA/B;AACA,qBAAO,IAAP;AACD;AACF;AACF;;AAEDnC,QAAAA,SAAS,CAACJ,SAAD,EAA4B;AACnC;AAAA;AAAA,4CAAarC,QAAb,CAAsBU,IAAtB,CAA2B;AAAA;AAAA,4CAAamE,UAAxC,EAAoDxC,SAApD,EAA+D,KAAKxC,CAApE,EAAuE,KAAKE,CAA5E;AACD;;AAED2B,QAAAA,UAAU,CAACP,MAAD,EAA0B;AAClC,gBAAM2D,OAAO,GAAG;AAAA;AAAA,0CAAY9E,QAAZ,CAAqBsD,MAArB,CAA4BF,MAA5B,CAAmCC,CAAC,IAAIA,CAAC,CAAChC,KAAF,KAAY;AAAA;AAAA,sDAAkBE,KAAtE,CAAhB;;AAEA,eAAK,IAAIqC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGkB,OAAO,CAACjB,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACvC,kBAAM;AAAE/D,cAAAA,CAAC,EAAEkE,MAAL;AAAahE,cAAAA,CAAC,EAAEiE,MAAhB;AAAwBvC,cAAAA;AAAxB,gBAA+BqD,OAAO,CAAClB,CAAD,CAA5C;;AAEA,gBACEzC,MAAM,KAAK;AAAA;AAAA,oDAAgBa,GAA3B,IACA,KAAKK,SAAL,KAAmB;AAAA;AAAA,kDAAeL,GADlC,IAEA,KAAKnC,CAAL,KAAWkE,MAFX,IAGA,KAAKjE,OAAL,GAAe,CAAf,KAAqBkE,MAJvB,EAKE;AACA,mBAAK3C,KAAL,GAAa;AAAA;AAAA,0DAAkBG,MAA/B;AAEA,qBAAOC,EAAP;AACD,aATD,MASO,IACLN,MAAM,KAAK;AAAA;AAAA,oDAAgBc,MAA3B,IACA,KAAKI,SAAL,KAAmB;AAAA;AAAA,kDAAeJ,MADlC,IAEA,KAAKpC,CAAL,KAAWkE,MAFX,IAGA,KAAKjE,OAAL,GAAe,CAAf,KAAqBkE,MAJhB,EAKL;AACA,mBAAK3C,KAAL,GAAa;AAAA;AAAA,0DAAkBG,MAA/B;AACA,qBAAOC,EAAP;AACD,aARM,MAQA,IACLN,MAAM,KAAK;AAAA;AAAA,oDAAgBe,IAA3B,IACA,KAAKG,SAAL,KAAmB;AAAA;AAAA,kDAAeH,IADlC,IAEA,KAAKrC,CAAL,GAAS,CAAT,KAAekE,MAFf,IAGA,KAAKjE,OAAL,KAAiBkE,MAJZ,EAKL;AACA,mBAAK3C,KAAL,GAAa;AAAA;AAAA,0DAAkBG,MAA/B;AACA,qBAAOC,EAAP;AACD,aARM,MAQA,IACLN,MAAM,KAAK;AAAA;AAAA,oDAAgBgB,KAA3B,IACA,KAAKE,SAAL,KAAmB;AAAA;AAAA,kDAAeF,KADlC,IAEA,KAAKtC,CAAL,GAAS,CAAT,KAAekE,MAFf,IAGA,KAAKjE,OAAL,KAAiBkE,MAJZ,EAKL;AACA,mBAAK3C,KAAL,GAAa;AAAA;AAAA,0DAAkBG,MAA/B;AACA,qBAAOC,EAAP;AACD,aARM,MAQA;AACL,mBAAKJ,KAAL,GAAa;AAAA;AAAA,0DAAkB0D,IAA/B;AACD;AACF;;AACD,iBAAO,EAAP;AACD;;AAzmC4C,O","sourcesContent":["import {\n  _decorator,\n  Component,\n  Sprite,\n  UITransform,\n  animation,\n  AnimationClip,\n  SpriteFrame,\n  AnimationComponent,\n  AudioClip,\n} from 'cc'\nimport {\n  CONTROLLER_ENMU,\n  EVENTMANAGER,\n  PARAMS_NAME_ENUM,\n  DRIECTION_ENUM,\n  ENTINY_STATE_ENUM,\n  DIRECTION_ORDER_ENUM,\n  ENTITY_TYPE_ENUM,\n  SHAKE_DIRECTION_ENMU,\n} from '../../Enums'\nimport EventManager from '../RunTime/EventManager'\nimport ResourcesManager from '../RunTime/ResourcesManager'\nimport { PlayerStateMachine } from './PlayerStateMachine'\nimport { StateMachine } from '../Base/StateMachine'\nimport { EnityManger } from '../Base/EnityManger'\nimport DataManager from '../RunTime/DataManager'\nimport { IEntity } from '../../Level'\nimport MusicManager from '../RunTime/MusicManager'\nconst { ccclass, property } = _decorator\n\nexport const TILE_HEIGHT = 55\nexport const TILE_WIDTH = 55\nexport const ANIMATION_SPEED = 1 / 8\n@ccclass('PlayerManager')\nexport class PlayerManager extends EnityManger {\n  private readonly speeed = 1 / 10\n  isMoveing: boolean = false\n  targetX: number\n  targetY: number\n  clip: AudioClip[] = []\n  async init(params: IEntity) {\n    this.fsm = this.addComponent(PlayerStateMachine)\n\n    await this.fsm.init()\n\n    super.init(params)\n\n    this.targetX = this.x\n    this.targetY = this.y\n\n    EventManager.Instance.on(EVENTMANAGER.PLAYER_CONTROLLER, this.inputhandler, this)\n    EventManager.Instance.on(EVENTMANAGER.ATTACK_PLAYER, this.Dead, this)\n  }\n  onDestroy() {\n    super.onDestroy()\n\n    EventManager.Instance.off(EVENTMANAGER.PLAYER_CONTROLLER, this.inputhandler)\n    EventManager.Instance.off(EVENTMANAGER.ATTACK_PLAYER, this.Dead)\n  }\n\n  onAttackShake(type: SHAKE_DIRECTION_ENMU) {\n    EventManager.Instance.emit(EVENTMANAGER.SHAKE_SHOW, type)\n  }\n  update() {\n    super.update()\n    this.updateXY()\n  }\n  updateXY() {\n    if (this.x < this.targetX) {\n      this.x += this.speeed\n    } else if (this.x > this.targetX) {\n      this.x -= this.speeed\n    }\n\n    if (this.y < this.targetY) {\n      this.y += this.speeed\n    } else if (this.y > this.targetY) {\n      this.y -= this.speeed\n    }\n\n    if (Math.abs(this.x - this.targetX) <= 0.01 && Math.abs(this.y - this.targetY) <= 0.01 && this.isMoveing === true) {\n      this.x = this.targetX\n      this.y = this.targetY\n      this.isMoveing = false\n      EventManager.Instance.emit(EVENTMANAGER.PLAYERMOVE_END)\n    }\n  }\n\n  inputhandler(inputs: CONTROLLER_ENMU, clip: AudioClip[]) {\n    this.clip = clip\n    if (\n      this.state === ENTINY_STATE_ENUM.AIRDEATH ||\n      this.state === ENTINY_STATE_ENUM.DEATH ||\n      this.state === ENTINY_STATE_ENUM.ATTACK\n    ) {\n      return\n    }\n    if (this.isMoveing) {\n      return\n    }\n    const id = this.willAttack(inputs)\n    if (id) {\n      EventManager.Instance.emit(EVENTMANAGER.RECORD_STEP)\n      EventManager.Instance.emit(EVENTMANAGER.ATTACK_ENEMY, id)\n      EventManager.Instance.emit(EVENTMANAGER.DOOR_OPEN)\n      EventManager.Instance.emit(EVENTMANAGER.PLAYERMOVE_END)\n      MusicManager.Instance.sound(clip[1])\n      return\n    }\n    if (this.willblock(inputs)) {\n      if (inputs === CONTROLLER_ENMU.TOP) {\n        EventManager.Instance.emit(EVENTMANAGER.SHAKE_SHOW, SHAKE_DIRECTION_ENMU.TOP)\n      } else if (inputs === CONTROLLER_ENMU.BOTTOM) {\n        EventManager.Instance.emit(EVENTMANAGER.SHAKE_SHOW, SHAKE_DIRECTION_ENMU.BOTTOM)\n      } else if (inputs === CONTROLLER_ENMU.LEFT) {\n        EventManager.Instance.emit(EVENTMANAGER.SHAKE_SHOW, SHAKE_DIRECTION_ENMU.LEFT)\n      } else if (inputs === CONTROLLER_ENMU.RIGHT) {\n        EventManager.Instance.emit(EVENTMANAGER.SHAKE_SHOW, SHAKE_DIRECTION_ENMU.RIGHT)\n      } else if (inputs === CONTROLLER_ENMU.TURN_LEFT && this.direction === DRIECTION_ENUM.TOP) {\n        EventManager.Instance.emit(EVENTMANAGER.SHAKE_SHOW, SHAKE_DIRECTION_ENMU.LEFT)\n      } else if (inputs === CONTROLLER_ENMU.TURN_LEFT && this.direction === DRIECTION_ENUM.LEFT) {\n        EventManager.Instance.emit(EVENTMANAGER.SHAKE_SHOW, SHAKE_DIRECTION_ENMU.BOTTOM)\n      } else if (inputs === CONTROLLER_ENMU.TURN_LEFT && this.direction === DRIECTION_ENUM.BOTTOM) {\n        EventManager.Instance.emit(EVENTMANAGER.SHAKE_SHOW, SHAKE_DIRECTION_ENMU.RIGHT)\n      } else if (inputs === CONTROLLER_ENMU.TURN_LEFT && this.direction === DRIECTION_ENUM.RIGHT) {\n        EventManager.Instance.emit(EVENTMANAGER.SHAKE_SHOW, SHAKE_DIRECTION_ENMU.TOP)\n      } else if (inputs === CONTROLLER_ENMU.TURN_RIGHT && this.direction === DRIECTION_ENUM.TOP) {\n        EventManager.Instance.emit(EVENTMANAGER.SHAKE_SHOW, SHAKE_DIRECTION_ENMU.RIGHT)\n      } else if (inputs === CONTROLLER_ENMU.TURN_RIGHT && this.direction === DRIECTION_ENUM.LEFT) {\n        EventManager.Instance.emit(EVENTMANAGER.SHAKE_SHOW, SHAKE_DIRECTION_ENMU.TOP)\n      } else if (inputs === CONTROLLER_ENMU.TURN_RIGHT && this.direction === DRIECTION_ENUM.BOTTOM) {\n        EventManager.Instance.emit(EVENTMANAGER.SHAKE_SHOW, SHAKE_DIRECTION_ENMU.LEFT)\n      } else if (inputs === CONTROLLER_ENMU.TURN_RIGHT && this.direction === DRIECTION_ENUM.RIGHT) {\n        EventManager.Instance.emit(EVENTMANAGER.SHAKE_SHOW, SHAKE_DIRECTION_ENMU.BOTTOM)\n      }\n      MusicManager.Instance.sound(clip[2])\n\n      return\n    }\n\n    this.move(inputs)\n    MusicManager.Instance.sound(clip[0])\n  }\n  /**\n   *\n   *  死亡\n   */\n  Dead(type: ENTINY_STATE_ENUM, ctx?: any) {\n    this.state = type\n\n    MusicManager.Instance.sound(this.clip[3])\n  }\n  /**\n   * 移动\n   * @param inputs\n   */\n  move(inputs: CONTROLLER_ENMU) {\n    EventManager.Instance.emit(EVENTMANAGER.RECORD_STEP)\n    switch (inputs) {\n      case CONTROLLER_ENMU.TOP:\n        this.targetY -= 1\n        this.isMoveing = true\n        this.showsmoke(DRIECTION_ENUM.TOP)\n        break\n      case CONTROLLER_ENMU.BOTTOM:\n        this.targetY += 1\n        this.isMoveing = true\n        this.showsmoke(DRIECTION_ENUM.BOTTOM)\n        break\n      case CONTROLLER_ENMU.LEFT:\n        this.targetX -= 1\n        this.isMoveing = true\n        this.showsmoke(DRIECTION_ENUM.LEFT)\n        break\n      case CONTROLLER_ENMU.RIGHT:\n        this.targetX += 1\n        this.isMoveing = true\n        this.showsmoke(DRIECTION_ENUM.RIGHT)\n        break\n      case CONTROLLER_ENMU.TURN_LEFT:\n        this.state = ENTINY_STATE_ENUM.TURN_LEFT\n        if (this.direction === DRIECTION_ENUM.TOP) {\n          this.direction = DRIECTION_ENUM.LEFT\n        } else if (this.direction === DRIECTION_ENUM.LEFT) {\n          this.direction = DRIECTION_ENUM.BOTTOM\n        } else if (this.direction === DRIECTION_ENUM.BOTTOM) {\n          this.direction = DRIECTION_ENUM.RIGHT\n        } else if (this.direction === DRIECTION_ENUM.RIGHT) {\n          this.direction = DRIECTION_ENUM.TOP\n        }\n\n        EventManager.Instance.emit(EVENTMANAGER.PLAYERMOVE_END)\n\n        break\n      case CONTROLLER_ENMU.TURN_RIGHT:\n        if (this.direction === DRIECTION_ENUM.LEFT) {\n          this.direction = DRIECTION_ENUM.TOP\n        } else if (this.direction === DRIECTION_ENUM.RIGHT) {\n          this.direction = DRIECTION_ENUM.BOTTOM\n        } else if (this.direction === DRIECTION_ENUM.BOTTOM) {\n          this.direction = DRIECTION_ENUM.LEFT\n        } else if (this.direction === DRIECTION_ENUM.TOP) {\n          this.direction = DRIECTION_ENUM.RIGHT\n        }\n        this.state = ENTINY_STATE_ENUM.TURN_RIGHT\n        EventManager.Instance.emit(EVENTMANAGER.PLAYERMOVE_END)\n\n        break\n      default:\n        break\n    }\n  }\n\n  willblock(inputs: CONTROLLER_ENMU) {\n    const { targetX: x, targetY: y, direction } = this\n    const { tileInfo } = DataManager.Instance\n    const { mapRowCount: row, mapColumnCount: column } = DataManager.Instance\n    const { x: doorX, y: doorY, state: doorState } = DataManager.Instance.door || {}\n    const burst = DataManager.Instance.burst.filter(e => e.state !== ENTINY_STATE_ENUM.DEATH)\n    const enemes = DataManager.Instance.enemes.filter(e => e.state !== ENTINY_STATE_ENUM.DEATH)\n    //按钮方向——向上\n    if (inputs === CONTROLLER_ENMU.TOP) {\n      const playerNextY = y - 1\n\n      //玩家方向——向上\n      if (direction === DRIECTION_ENUM.TOP) {\n        //判断是否超出地图\n        if (playerNextY < 0) {\n          this.state = ENTINY_STATE_ENUM.BLOCKFRONT\n          return true\n        }\n\n        const weaponNextY = y - 2\n        const nextPlayerTile = tileInfo[x]?.[playerNextY]\n        const nextWeaponTile = tileInfo[x]?.[weaponNextY]\n\n        //判断门\n        if (\n          ((playerNextY === doorY && doorX === x) || (doorX === x && weaponNextY === doorY)) &&\n          doorState !== ENTINY_STATE_ENUM.DEATH\n        ) {\n          //\n          this.state = ENTINY_STATE_ENUM.BLOCKFRONT\n          return true\n        }\n\n        //判断敌人\n        for (let i = 0; i < enemes.length; i++) {\n          const enemy = enemes[i]\n          const { x: enemyX, y: enemyY } = enemy\n          if ((playerNextY === enemyY && enemyX === x) || (enemyX === x && weaponNextY === enemyY)) {\n            //\n            this.state = ENTINY_STATE_ENUM.BLOCKFRONT\n            return true\n          }\n        }\n        //判断地裂\n        if (\n          burst.some(burst => burst.x === x && burst.y === playerNextY) &&\n          (!nextWeaponTile || nextWeaponTile.turnable)\n        ) {\n          return false\n        }\n        //最后判断地图元素\n        if (nextPlayerTile && nextPlayerTile.moveable && (!nextWeaponTile || nextWeaponTile.turnable)) {\n          // empty\n        } else {\n          this.state = ENTINY_STATE_ENUM.BLOCKFRONT\n          return true\n        }\n\n        //玩家方向——向下\n      } else if (direction === DRIECTION_ENUM.BOTTOM) {\n        //判断是否超出地图\n        if (playerNextY < 0) {\n          this.state = ENTINY_STATE_ENUM.BLOCKBACK\n          return true\n        }\n\n        const weaponNextY = y\n        const nextPlayerTile = tileInfo[x]?.[playerNextY]\n        const nextWeaponTile = tileInfo[x]?.[weaponNextY]\n        //判断门\n        if (\n          ((playerNextY === doorY && doorX === x) || (doorX === x && weaponNextY === doorY)) &&\n          doorState !== ENTINY_STATE_ENUM.DEATH\n        ) {\n          //\n\n          this.state = ENTINY_STATE_ENUM.BLOCKBACK\n          return true\n        }\n\n        //判断敌人\n        for (let i = 0; i < enemes.length; i++) {\n          const enemy = enemes[i]\n          const { x: enemyX, y: enemyY } = enemy\n          if (playerNextY === enemyY && enemyX === x) {\n            //\n            this.state = ENTINY_STATE_ENUM.BLOCKBACK\n            return true\n          }\n        }\n        //判断地裂\n        if (\n          burst.some(burst => burst.x === x && burst.y === playerNextY) &&\n          (!nextWeaponTile || nextWeaponTile.turnable)\n        ) {\n          return false\n        }\n        //最后判断地图元素\n        if (nextPlayerTile && nextPlayerTile.moveable && (!nextWeaponTile || nextWeaponTile.turnable)) {\n          // empty\n        } else {\n          this.state = ENTINY_STATE_ENUM.BLOCKBACK\n          return true\n        }\n\n        //玩家方向——向左\n      } else if (direction === DRIECTION_ENUM.LEFT) {\n        //判断是否超出地图\n        if (playerNextY < 0) {\n          this.state = ENTINY_STATE_ENUM.BLOCKLEFT\n          return true\n        }\n\n        const weaponNextX = x - 1\n        const weaponNextY = y - 1\n        const nextPlayerTile = tileInfo[x]?.[playerNextY]\n        const nextWeaponTile = tileInfo[weaponNextX]?.[weaponNextY]\n\n        //判断门\n        if (\n          ((playerNextY === doorY && doorX === x) || (doorX === weaponNextX && weaponNextY === doorY)) &&\n          doorState !== ENTINY_STATE_ENUM.DEATH\n        ) {\n          //\n          this.state = ENTINY_STATE_ENUM.BLOCKLEFT\n          return true\n        }\n\n        //判断敌人\n        for (let i = 0; i < enemes.length; i++) {\n          const enemy = enemes[i]\n          const { x: enemyX, y: enemyY } = enemy\n          if ((playerNextY === enemyY && enemyX === x) || (weaponNextY === enemyY && enemyX === weaponNextX)) {\n            //\n            this.state = ENTINY_STATE_ENUM.BLOCKLEFT\n            return true\n          }\n        }\n        //判断地裂\n        if (\n          burst.some(burst => burst.x === x && burst.y === playerNextY) &&\n          (!nextWeaponTile || nextWeaponTile.turnable)\n        ) {\n          return false\n        }\n\n        //最后判断地图元素\n        if (nextPlayerTile && nextPlayerTile.moveable && (!nextWeaponTile || nextWeaponTile.turnable)) {\n          // empty\n        } else {\n          this.state = ENTINY_STATE_ENUM.BLOCKRIGHT\n          return true\n        }\n\n        //玩家方向——向右\n      } else if (direction === DRIECTION_ENUM.RIGHT) {\n        //判断是否超出地图\n        if (playerNextY < 0) {\n          this.state = ENTINY_STATE_ENUM.BLOCKRIGHT\n          return true\n        }\n\n        const weaponNextX = x + 1\n        const weaponNextY = y - 1\n        const nextPlayerTile = tileInfo[x]?.[playerNextY]\n        const nextWeaponTile = tileInfo[weaponNextX]?.[weaponNextY]\n\n        //判断门\n        if (\n          ((playerNextY === doorY && doorX === x) || (doorX === weaponNextX && weaponNextY === doorY)) &&\n          doorState !== ENTINY_STATE_ENUM.DEATH\n        ) {\n          //\n          this.state = ENTINY_STATE_ENUM.BLOCKRIGHT\n          return true\n        }\n\n        //判断敌人\n        for (let i = 0; i < enemes.length; i++) {\n          const enemy = enemes[i]\n          const { x: enemyX, y: enemyY } = enemy\n          if ((playerNextY === enemyY && enemyX === x) || (weaponNextY === enemyY && enemyX === weaponNextX)) {\n            //\n            this.state = ENTINY_STATE_ENUM.BLOCKRIGHT\n            return true\n          }\n        }\n        //判断地裂\n        if (\n          burst.some(burst => burst.x === x && burst.y === playerNextY) &&\n          (!nextWeaponTile || nextWeaponTile.turnable)\n        ) {\n          return false\n        }\n        //最后判断地图元素\n        if (nextPlayerTile && nextPlayerTile.moveable && (!nextWeaponTile || nextWeaponTile.turnable)) {\n          // empty\n        } else {\n          this.state = ENTINY_STATE_ENUM.BLOCKLEFT\n          return true\n        }\n      }\n\n      //按钮方向——向下\n    } else if (inputs === CONTROLLER_ENMU.BOTTOM) {\n      const playerNextY = y + 1\n\n      //玩家方向——向上\n      if (direction === DRIECTION_ENUM.TOP) {\n        if (playerNextY > column - 1) {\n          this.state = ENTINY_STATE_ENUM.BLOCKBACK\n          return true\n        }\n\n        const weaponNextY = y\n        const nextPlayerTile = tileInfo[x]?.[playerNextY]\n        const nextWeaponTile = tileInfo[x]?.[weaponNextY]\n\n        //判断门\n        if (\n          ((playerNextY === doorY && doorX === x) || (doorX === x && weaponNextY === doorY)) &&\n          doorState !== ENTINY_STATE_ENUM.DEATH\n        ) {\n          //\n          this.state = ENTINY_STATE_ENUM.BLOCKBACK\n          return true\n        }\n\n        //判断敌人\n        for (let i = 0; i < enemes.length; i++) {\n          const enemy = enemes[i]\n          const { x: enemyX, y: enemyY } = enemy\n          if (playerNextY === enemyY && enemyX === x) {\n            //\n            this.state = ENTINY_STATE_ENUM.BLOCKBACK\n            return true\n          }\n        }\n        //判断地裂\n        if (\n          burst.some(burst => burst.x === x && burst.y === playerNextY) &&\n          (!nextWeaponTile || nextWeaponTile.turnable)\n        ) {\n          return false\n        }\n        //最后判断地图元素\n        if (nextPlayerTile && nextPlayerTile.moveable && (!nextWeaponTile || nextWeaponTile.turnable)) {\n          // empty\n        } else {\n          this.state = ENTINY_STATE_ENUM.BLOCKBACK\n          return true\n        }\n\n        //玩家方向——向下\n      } else if (direction === DRIECTION_ENUM.BOTTOM) {\n        if (playerNextY > column - 1) {\n          this.state = ENTINY_STATE_ENUM.BLOCKFRONT\n          return true\n        }\n\n        const weaponNextY = y + 2\n        const nextPlayerTile = tileInfo[x]?.[playerNextY]\n        const nextWeaponTile = tileInfo[x]?.[weaponNextY]\n        //判断门\n        if (\n          ((playerNextY === doorY && doorX === x) || (doorX === x && weaponNextY === doorY)) &&\n          doorState !== ENTINY_STATE_ENUM.DEATH\n        ) {\n          //\n          this.state = ENTINY_STATE_ENUM.BLOCKFRONT\n          return true\n        }\n\n        //判断敌人\n        for (let i = 0; i < enemes.length; i++) {\n          const enemy = enemes[i]\n          const { x: enemyX, y: enemyY } = enemy\n          if ((playerNextY === enemyY && enemyX === x) || (enemyX === x && weaponNextY === enemyY)) {\n            //\n            this.state = ENTINY_STATE_ENUM.BLOCKFRONT\n            return true\n          }\n        }\n        //判断地裂\n        if (\n          burst.some(burst => burst.x === x && burst.y === playerNextY) &&\n          (!nextWeaponTile || nextWeaponTile.turnable)\n        ) {\n          return false\n        }\n        //最后判断地图元素\n        if (nextPlayerTile && nextPlayerTile.moveable && (!nextWeaponTile || nextWeaponTile.turnable)) {\n          // empty\n        } else {\n          this.state = ENTINY_STATE_ENUM.BLOCKFRONT\n          return true\n        }\n\n        //玩家方向——向左\n      } else if (direction === DRIECTION_ENUM.LEFT) {\n        if (playerNextY > column - 1) {\n          this.state = ENTINY_STATE_ENUM.BLOCKLEFT\n          return true\n        }\n\n        const weaponNextX = x - 1\n        const weaponNextY = y + 1\n        const nextPlayerTile = tileInfo[x]?.[playerNextY]\n        const nextWeaponTile = tileInfo[weaponNextX]?.[weaponNextY]\n        //判断门\n        if (\n          ((playerNextY === doorY && doorX === x) || (doorX === weaponNextX && weaponNextY === doorY)) &&\n          doorState !== ENTINY_STATE_ENUM.DEATH\n        ) {\n          //\n          this.state = ENTINY_STATE_ENUM.BLOCKLEFT\n          return true\n        }\n\n        //判断敌人\n        for (let i = 0; i < enemes.length; i++) {\n          const enemy = enemes[i]\n          const { x: enemyX, y: enemyY } = enemy\n          if ((playerNextY === enemyY && enemyX === x) || (enemyX === weaponNextX && enemyY === weaponNextY)) {\n            //\n            this.state = ENTINY_STATE_ENUM.BLOCKLEFT\n            return true\n          }\n        }\n        //最后判断地图元素\n        if (nextPlayerTile && nextPlayerTile.moveable && (!nextWeaponTile || nextWeaponTile.turnable)) {\n          // empty\n        } else {\n          this.state = ENTINY_STATE_ENUM.BLOCKLEFT\n          return true\n        }\n        //判断地裂\n        if (\n          burst.some(burst => burst.x === x && burst.y === playerNextY) &&\n          (!nextWeaponTile || nextWeaponTile.turnable)\n        ) {\n          return false\n        }\n        //玩家方向——向右\n      } else if (direction === DRIECTION_ENUM.RIGHT) {\n        if (playerNextY > column - 1) {\n          this.state = ENTINY_STATE_ENUM.BLOCKRIGHT\n\n          return true\n        }\n\n        const weaponNextX = x + 1\n        const weaponNextY = y + 1\n        const nextPlayerTile = tileInfo[x]?.[playerNextY]\n        const nextWeaponTile = tileInfo[weaponNextX]?.[weaponNextY]\n        //判断门\n        if (\n          ((playerNextY === doorY && doorX === x) || (doorX === weaponNextX && weaponNextY === doorY)) &&\n          doorState !== ENTINY_STATE_ENUM.DEATH\n        ) {\n          //\n          this.state = ENTINY_STATE_ENUM.BLOCKLEFT\n          return true\n        }\n\n        //判断敌人\n        for (let i = 0; i < enemes.length; i++) {\n          const enemy = enemes[i]\n          const { x: enemyX, y: enemyY } = enemy\n          if ((playerNextY === enemyY && enemyX === x) || (enemyX === weaponNextX && enemyY === weaponNextY)) {\n            //\n            this.state = ENTINY_STATE_ENUM.BLOCKLEFT\n            return true\n          }\n        }\n        //判断地裂\n        if (\n          burst.some(burst => burst.x === x && burst.y === playerNextY) &&\n          (!nextWeaponTile || nextWeaponTile.turnable)\n        ) {\n          return false\n        }\n        //最后判断地图元素\n        if (nextPlayerTile && nextPlayerTile.moveable && (!nextWeaponTile || nextWeaponTile.turnable)) {\n          // empty\n        } else {\n          this.state = ENTINY_STATE_ENUM.BLOCKRIGHT\n          return true\n        }\n      }\n\n      //按钮方向——向左\n    } else if (inputs === CONTROLLER_ENMU.LEFT) {\n      const playerNextX = x - 1\n\n      //玩家方向——向上\n      if (direction === DRIECTION_ENUM.TOP) {\n        //判断是否超出地图\n        if (playerNextX < 0) {\n          this.state = ENTINY_STATE_ENUM.BLOCKLEFT\n\n          return true\n        }\n\n        const weaponNextX = x - 1\n        const weaponNextY = y - 1\n        const nextPlayerTile = tileInfo[playerNextX]?.[y]\n        const nextWeaponTile = tileInfo[weaponNextX]?.[weaponNextY]\n\n        //判断门\n        if (\n          ((y === doorY && doorX === playerNextX) || (doorX === weaponNextX && weaponNextY === doorY)) &&\n          doorState !== ENTINY_STATE_ENUM.DEATH\n        ) {\n          //\n          this.state = ENTINY_STATE_ENUM.BLOCKLEFT\n          return true\n        }\n\n        //判断敌人\n        for (let i = 0; i < enemes.length; i++) {\n          const enemy = enemes[i]\n          const { x: enemyX, y: enemyY } = enemy\n          if ((y === enemyY && enemyX === playerNextX) || (enemyX === weaponNextX && enemyY === weaponNextY)) {\n            //\n            this.state = ENTINY_STATE_ENUM.BLOCKLEFT\n            return true\n          }\n        }\n        //判断地裂\n        if (\n          burst.some(burst => burst.x === playerNextX && burst.y === y) &&\n          (!nextWeaponTile || nextWeaponTile.turnable)\n        ) {\n          return false\n        }\n        //最后判断地图元素\n        if (nextPlayerTile && nextPlayerTile.moveable && (!nextWeaponTile || nextWeaponTile.turnable)) {\n          // empty\n        } else {\n          this.state = ENTINY_STATE_ENUM.BLOCKLEFT\n          return true\n        }\n\n        //玩家方向——向下\n      } else if (direction === DRIECTION_ENUM.BOTTOM) {\n        //判断是否超出地图\n        if (playerNextX < 0) {\n          this.state = ENTINY_STATE_ENUM.BLOCKRIGHT\n\n          return true\n        }\n\n        const weaponNextX = x - 1\n        const weaponNextY = y + 1\n        const nextPlayerTile = tileInfo[playerNextX]?.[y]\n        const nextWeaponTile = tileInfo[weaponNextX]?.[weaponNextY]\n\n        //判断门\n        if (\n          ((y === doorY && doorX === playerNextX) || (doorX === weaponNextX && weaponNextY === doorY)) &&\n          doorState !== ENTINY_STATE_ENUM.DEATH\n        ) {\n          //\n          this.state = ENTINY_STATE_ENUM.BLOCKLEFT\n          return true\n        }\n\n        //判断敌人\n        for (let i = 0; i < enemes.length; i++) {\n          const enemy = enemes[i]\n          const { x: enemyX, y: enemyY } = enemy\n          if ((y === enemyY && enemyX === playerNextX) || (enemyX === weaponNextX && enemyY === weaponNextY)) {\n            //\n            this.state = ENTINY_STATE_ENUM.BLOCKLEFT\n            return true\n          }\n        }\n        //判断地裂\n        if (\n          burst.some(burst => burst.x === playerNextX && burst.y === y) &&\n          (!nextWeaponTile || nextWeaponTile.turnable)\n        ) {\n          return false\n        }\n        //最后判断地图元素\n        if (nextPlayerTile && nextPlayerTile.moveable && (!nextWeaponTile || nextWeaponTile.turnable)) {\n          // empty\n        } else {\n          this.state = ENTINY_STATE_ENUM.BLOCKRIGHT\n          return true\n        }\n\n        //玩家方向——向左\n      } else if (direction === DRIECTION_ENUM.LEFT) {\n        //判断是否超出地图\n        if (playerNextX < 0) {\n          this.state = ENTINY_STATE_ENUM.BLOCKFRONT\n\n          return true\n        }\n\n        const weaponNextX = x - 2\n        const nextPlayerTile = tileInfo[playerNextX]?.[y]\n        const nextWeaponTile = tileInfo[weaponNextX]?.[y]\n        //判断门\n        if (\n          ((y === doorY && doorX === playerNextX) || (doorX === weaponNextX && y === doorY)) &&\n          doorState !== ENTINY_STATE_ENUM.DEATH\n        ) {\n          //\n          this.state = ENTINY_STATE_ENUM.BLOCKLEFT\n          return true\n        }\n\n        //判断敌人\n        for (let i = 0; i < enemes.length; i++) {\n          const enemy = enemes[i]\n          const { x: enemyX, y: enemyY } = enemy\n          if ((y === enemyY && enemyX === playerNextX) || (enemyX === weaponNextX && enemyY === y)) {\n            //\n            this.state = ENTINY_STATE_ENUM.BLOCKLEFT\n            return true\n          }\n        }\n        //判断地裂\n        if (\n          burst.some(burst => burst.x === playerNextX && burst.y === y) &&\n          (!nextWeaponTile || nextWeaponTile.turnable)\n        ) {\n          return false\n        }\n        //最后判断地图元素\n        if (nextPlayerTile && nextPlayerTile.moveable && (!nextWeaponTile || nextWeaponTile.turnable)) {\n          // empty\n        } else {\n          this.state = ENTINY_STATE_ENUM.BLOCKFRONT\n          return true\n        }\n\n        //玩家方向——向右\n      } else if (direction === DRIECTION_ENUM.RIGHT) {\n        //判断是否超出地图\n        if (playerNextX < 0) {\n          this.state = ENTINY_STATE_ENUM.BLOCKBACK\n\n          return true\n        }\n\n        const weaponNextX = x\n        const nextPlayerTile = tileInfo[playerNextX]?.[y]\n        const nextWeaponTile = tileInfo[weaponNextX]?.[y]\n\n        //判断门\n        if (\n          ((y === doorY && doorX === playerNextX) || (doorX === weaponNextX && y === doorY)) &&\n          doorState !== ENTINY_STATE_ENUM.DEATH\n        ) {\n          //\n          this.state = ENTINY_STATE_ENUM.BLOCKLEFT\n          return true\n        }\n\n        //判断敌人\n        for (let i = 0; i < enemes.length; i++) {\n          const enemy = enemes[i]\n          const { x: enemyX, y: enemyY } = enemy\n          if ((y === enemyY && enemyX === playerNextX) || (enemyX === weaponNextX && enemyY === y)) {\n            //\n            this.state = ENTINY_STATE_ENUM.BLOCKLEFT\n            return true\n          }\n        }\n        //判断地裂\n        if (\n          burst.some(burst => burst.x === playerNextX && burst.y === y) &&\n          (!nextWeaponTile || nextWeaponTile.turnable)\n        ) {\n          return false\n        }\n        //最后判断地图元素\n        if (nextPlayerTile && nextPlayerTile.moveable && (!nextWeaponTile || nextWeaponTile.turnable)) {\n          // empty\n        } else {\n          this.state = ENTINY_STATE_ENUM.BLOCKBACK\n          return true\n        }\n      }\n\n      //按钮方向——向右\n    } else if (inputs === CONTROLLER_ENMU.RIGHT) {\n      const playerNextX = x + 1\n\n      //玩家方向——向上\n      if (direction === DRIECTION_ENUM.TOP) {\n        if (playerNextX > row - 1) {\n          this.state = ENTINY_STATE_ENUM.BLOCKRIGHT\n\n          return true\n        }\n\n        const weaponNextX = x + 1\n        const weaponNextY = y - 1\n        const nextPlayerTile = tileInfo[playerNextX]?.[y]\n        const nextWeaponTile = tileInfo[weaponNextX]?.[weaponNextY]\n\n        //判断门\n        if (\n          ((y === doorY && doorX === playerNextX) || (doorX === weaponNextX && weaponNextY === doorY)) &&\n          doorState !== ENTINY_STATE_ENUM.DEATH\n        ) {\n          //\n          this.state = ENTINY_STATE_ENUM.BLOCKRIGHT\n          return true\n        }\n\n        //判断敌人\n        for (let i = 0; i < enemes.length; i++) {\n          const enemy = enemes[i]\n          const { x: enemyX, y: enemyY } = enemy\n          if ((y === enemyY && enemyX === playerNextX) || (enemyX === weaponNextX && enemyY === weaponNextY)) {\n            //\n            this.state = ENTINY_STATE_ENUM.BLOCKRIGHT\n            return true\n          }\n        }\n        //判断地裂\n        if (\n          burst.some(burst => burst.x === playerNextX && burst.y === y) &&\n          (!nextWeaponTile || nextWeaponTile.turnable)\n        ) {\n          return false\n        }\n        //最后判断地图元素\n        if (nextPlayerTile && nextPlayerTile.moveable && (!nextWeaponTile || nextWeaponTile.turnable)) {\n          // empty\n        } else {\n          this.state = ENTINY_STATE_ENUM.BLOCKRIGHT\n          return true\n        }\n\n        //玩家方向——向下\n      } else if (direction === DRIECTION_ENUM.BOTTOM) {\n        if (playerNextX > row - 1) {\n          this.state = ENTINY_STATE_ENUM.BLOCKLEFT\n\n          return true\n        }\n\n        const weaponNextX = x + 1\n        const weaponNextY = y + 1\n        const nextPlayerTile = tileInfo[playerNextX]?.[y]\n        const nextWeaponTile = tileInfo[weaponNextX]?.[weaponNextY]\n        //判断门\n        if (\n          ((y === doorY && doorX === playerNextX) || (doorX === weaponNextX && weaponNextY === doorY)) &&\n          doorState !== ENTINY_STATE_ENUM.DEATH\n        ) {\n          //\n          this.state = ENTINY_STATE_ENUM.BLOCKRIGHT\n          return true\n        }\n\n        //判断敌人\n        for (let i = 0; i < enemes.length; i++) {\n          const enemy = enemes[i]\n          const { x: enemyX, y: enemyY } = enemy\n          if ((y === enemyY && enemyX === playerNextX) || (enemyX === weaponNextX && enemyY === weaponNextY)) {\n            //\n            this.state = ENTINY_STATE_ENUM.BLOCKRIGHT\n            return true\n          }\n        }\n        //判断地裂\n        if (\n          burst.some(burst => burst.x === playerNextX && burst.y === y) &&\n          (!nextWeaponTile || nextWeaponTile.turnable)\n        ) {\n          return false\n        }\n        //最后判断地图元素\n        if (nextPlayerTile && nextPlayerTile.moveable && (!nextWeaponTile || nextWeaponTile.turnable)) {\n          // empty\n        } else {\n          this.state = ENTINY_STATE_ENUM.BLOCKBACK\n          return true\n        }\n\n        //玩家方向——向左\n      } else if (direction === DRIECTION_ENUM.LEFT) {\n        if (playerNextX > row - 1) {\n          this.state = ENTINY_STATE_ENUM.BLOCKBACK\n\n          return true\n        }\n\n        const weaponNextX = x\n        const nextPlayerTile = tileInfo[playerNextX]?.[y]\n        const nextWeaponTile = tileInfo[weaponNextX]?.[y]\n        //判断门\n        if (\n          ((y === doorY && doorX === playerNextX) || (doorX === weaponNextX && y === doorY)) &&\n          doorState !== ENTINY_STATE_ENUM.DEATH\n        ) {\n          //\n          this.state = ENTINY_STATE_ENUM.BLOCKLEFT\n          return true\n        }\n\n        //判断敌人\n        for (let i = 0; i < enemes.length; i++) {\n          const enemy = enemes[i]\n          const { x: enemyX, y: enemyY } = enemy\n          if ((y === enemyY && enemyX === playerNextX) || (enemyX === weaponNextX && enemyY === y)) {\n            //\n            this.state = ENTINY_STATE_ENUM.BLOCKLEFT\n            return true\n          }\n        }\n        //判断地裂\n        if (\n          burst.some(burst => burst.x === playerNextX && burst.y === y) &&\n          (!nextWeaponTile || nextWeaponTile.turnable)\n        ) {\n          return false\n        }\n        //最后判断地图元素\n        if (nextPlayerTile && nextPlayerTile.moveable && (!nextWeaponTile || nextWeaponTile.turnable)) {\n          // empty\n        } else {\n          this.state = ENTINY_STATE_ENUM.BLOCKBACK\n          return true\n        }\n\n        //玩家方向——向右\n      } else if (direction === DRIECTION_ENUM.RIGHT) {\n        if (playerNextX > row - 1) {\n          this.state = ENTINY_STATE_ENUM.BLOCKFRONT\n\n          return true\n        }\n\n        const weaponNextX = x + 2\n        const nextPlayerTile = tileInfo[playerNextX]?.[y]\n        const nextWeaponTile = tileInfo[weaponNextX]?.[y]\n        //判断门\n        if (\n          ((y === doorY && doorX === playerNextX) || (doorX === weaponNextX && y === doorY)) &&\n          doorState !== ENTINY_STATE_ENUM.DEATH\n        ) {\n          //\n          this.state = ENTINY_STATE_ENUM.BLOCKRIGHT\n          return true\n        }\n\n        //判断敌人\n        for (let i = 0; i < enemes.length; i++) {\n          const enemy = enemes[i]\n          const { x: enemyX, y: enemyY } = enemy\n          if ((y === enemyY && enemyX === playerNextX) || (enemyX === weaponNextX && enemyY === y)) {\n            //\n            this.state = ENTINY_STATE_ENUM.BLOCKRIGHT\n            return true\n          }\n        }\n        //判断地裂\n        if (\n          burst.some(burst => burst.x === playerNextX && burst.y === y) &&\n          (!nextWeaponTile || nextWeaponTile.turnable)\n        ) {\n          return false\n        }\n        //最后判断地图元素\n        if (nextPlayerTile && nextPlayerTile.moveable && (!nextWeaponTile || nextWeaponTile.turnable)) {\n          // empty\n        } else {\n          this.state = ENTINY_STATE_ENUM.BLOCKFRONT\n          return true\n        }\n      }\n\n      //按钮方向——左转\n    } else if (inputs === CONTROLLER_ENMU.TURN_LEFT) {\n      let nextX\n      let nextY\n\n      if (direction === DRIECTION_ENUM.TOP) {\n        nextX = x - 1\n        nextY = y - 1\n      } else if (direction === DRIECTION_ENUM.BOTTOM) {\n        nextX = x + 1\n        nextY = y + 1\n      } else if (direction === DRIECTION_ENUM.LEFT) {\n        nextX = x - 1\n        nextY = y + 1\n      } else if (direction === DRIECTION_ENUM.RIGHT) {\n        nextX = x + 1\n        nextY = y - 1\n      }\n      /**\n       * 判断旋转砖块是否存在\n       */\n      if (\n        (!tileInfo[x]?.[nextY] || tileInfo[x]?.[nextY]?.turnable) &&\n        (!tileInfo[nextX]?.[y] || tileInfo[nextX]?.[y]?.turnable) &&\n        (!tileInfo[nextX]?.[nextY] || tileInfo[nextX]?.[nextY]?.turnable)\n      ) {\n        //\n      } else {\n        this.state = ENTINY_STATE_ENUM.BLOCKTURNLEFT\n        return true\n      }\n      //判断门\n      if (\n        (doorX === x && doorY === nextY) ||\n        (doorX === nextX && doorY === y) ||\n        (doorX === nextX && nextY === doorY && doorState !== ENTINY_STATE_ENUM.DEATH)\n      ) {\n        //\n        this.state = ENTINY_STATE_ENUM.BLOCKTURNLEFT\n        return true\n      }\n\n      //判断敌人\n      for (let i = 0; i < enemes.length; i++) {\n        const enemy = enemes[i]\n        const { x: enemyX, y: enemyY } = enemy\n        if (x === enemyX && enemyY === nextY) {\n          //\n          this.state = ENTINY_STATE_ENUM.BLOCKTURNLEFT\n          return true\n        } else if (nextX === enemyX && enemyY === y) {\n          //\n          this.state = ENTINY_STATE_ENUM.BLOCKTURNLEFT\n          return true\n        } else if (nextX === enemyX && enemyY === nextY) {\n          //\n          this.state = ENTINY_STATE_ENUM.BLOCKTURNLEFT\n          return true\n        }\n      }\n    } else if (inputs === CONTROLLER_ENMU.TURN_RIGHT) {\n      let nextX\n      let nextY\n\n      if (direction === DRIECTION_ENUM.TOP) {\n        nextX = x + 1\n        nextY = y - 1\n      } else if (direction === DRIECTION_ENUM.BOTTOM) {\n        nextX = x - 1\n        nextY = y + 1\n      } else if (direction === DRIECTION_ENUM.LEFT) {\n        nextX = x - 1\n        nextY = y - 1\n      } else if (direction === DRIECTION_ENUM.RIGHT) {\n        nextX = x + 1\n        nextY = y + 1\n      }\n\n      //判断门\n      if (\n        (doorX === x && doorY === nextY) ||\n        (doorX === nextX && doorY === y) ||\n        (doorX === nextX && nextY === doorY && doorState !== ENTINY_STATE_ENUM.DEATH)\n      ) {\n        //\n        this.state = ENTINY_STATE_ENUM.BLOCKTURNRIGHT\n        return true\n      }\n\n      //判断敌人\n      for (let i = 0; i < enemes.length; i++) {\n        const enemy = enemes[i]\n        const { x: enemyX, y: enemyY } = enemy\n        if (x === enemyX && enemyY === nextY) {\n          //\n          this.state = ENTINY_STATE_ENUM.BLOCKTURNRIGHT\n          return true\n        } else if (nextX === enemyX && enemyY === y) {\n          //\n          this.state = ENTINY_STATE_ENUM.BLOCKTURNRIGHT\n          return true\n        } else if (nextX === enemyX && enemyY === nextY) {\n          //\n          this.state = ENTINY_STATE_ENUM.BLOCKTURNRIGHT\n          return true\n        }\n      }\n\n      if (\n        (!tileInfo[x]?.[nextY] || tileInfo[x]?.[nextY]?.turnable) &&\n        (!tileInfo[nextX]?.[y] || tileInfo[nextX]?.[y]?.turnable) &&\n        (!tileInfo[nextX]?.[nextY] || tileInfo[nextX]?.[nextY]?.turnable)\n      ) {\n        //\n      } else {\n        this.state = ENTINY_STATE_ENUM.BLOCKTURNRIGHT\n        return true\n      }\n    }\n  }\n\n  showsmoke(direction: DRIECTION_ENUM) {\n    EventManager.Instance.emit(EVENTMANAGER.SMOKE_SHOW, direction, this.x, this.y)\n  }\n\n  willAttack(inputs: CONTROLLER_ENMU) {\n    const enemies = DataManager.Instance.enemes.filter(e => e.state !== ENTINY_STATE_ENUM.DEATH)\n\n    for (let i = 0; i < enemies.length; i++) {\n      const { x: enemyX, y: enemyY, id } = enemies[i]\n\n      if (\n        inputs === CONTROLLER_ENMU.TOP &&\n        this.direction === DRIECTION_ENUM.TOP &&\n        this.x === enemyX &&\n        this.targetY - 2 === enemyY\n      ) {\n        this.state = ENTINY_STATE_ENUM.ATTACK\n\n        return id\n      } else if (\n        inputs === CONTROLLER_ENMU.BOTTOM &&\n        this.direction === DRIECTION_ENUM.BOTTOM &&\n        this.x === enemyX &&\n        this.targetY + 2 === enemyY\n      ) {\n        this.state = ENTINY_STATE_ENUM.ATTACK\n        return id\n      } else if (\n        inputs === CONTROLLER_ENMU.LEFT &&\n        this.direction === DRIECTION_ENUM.LEFT &&\n        this.x - 2 === enemyX &&\n        this.targetY === enemyY\n      ) {\n        this.state = ENTINY_STATE_ENUM.ATTACK\n        return id\n      } else if (\n        inputs === CONTROLLER_ENMU.RIGHT &&\n        this.direction === DRIECTION_ENUM.RIGHT &&\n        this.x + 2 === enemyX &&\n        this.targetY === enemyY\n      ) {\n        this.state = ENTINY_STATE_ENUM.ATTACK\n        return id\n      } else {\n        this.state = ENTINY_STATE_ENUM.IDLE\n      }\n    }\n    return ''\n  }\n}\n"]}